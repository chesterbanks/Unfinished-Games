/**
 * Island Jumper
 * Chester Banks
 * May 23 2017
 * 
 * This is an old game I decided to finish up and release. The code might look a little worse because of this.
*/

// FIVE SETTINGS
/* underwater
 * beach
 * city
 * forest
 * mountaintop
 */
    
// Jump from island to island
// Hold down the mouse to charge up your power boots
// Let go to jump
// Will you judge the distance correctly?

textAlign(CENTER, CENTER);
textFont(createFont("Shadows Into Light"));

var scene = 'Menu';

var stage = 0;
var score = 4;

var completed = false;

var rectCollide = function(a, b) {
    return a.x + a.w > b.x && a.y + a.h > b.y && a.x < b.x + b.w && a.y < b.y + b.h;
};

var images = {
    'beachBG': function(){
        background(109, 187, 232);
        stroke(151, 204, 232);
        strokeWeight(50);
        line(25, 170, 25, 400);
        strokeWeight(70);
        line(85, 110, 85, 400);
        strokeWeight(60);
        line(150, 170, 150, 400);
        strokeWeight(80);
        line(220, 167, 220, 400);
        strokeWeight(45);
        line(280, 200, 280, 400);
        strokeWeight(30);
        line(317, 222, 317, 400);
        strokeWeight(67);
        line(365, 170, 365, 400);
        
        pushMatrix();
        translate(-20, 0);
        stroke(182, 219, 237);
        strokeWeight(50);
        line(25, 215, 25, 400);
        strokeWeight(70);
        line(85, 245, 85, 400);
        strokeWeight(60);
        line(150, 195, 150, 400);
        strokeWeight(80);
        line(220, 212, 220, 400);
        strokeWeight(45);
        line(280, 280, 280, 400);
        strokeWeight(30);
        line(317, 259, 317, 400);
        strokeWeight(67);
        line(365, 292, 365, 400);
        strokeWeight(67);
        line(420, 261, 420, 400);
        popMatrix();
        
        strokeWeight(10);
        stroke(255);
        line(200, 30, 230, 30);
        line(50, 130, 90, 130);
        line(70, 135, 100, 135);
        line(80, 123, 110, 123);
        line(280, 150, 320, 150);
        line(270, 155, 300, 155);
        line(280, 143, 310, 143);
        
        noStroke();
        fill(235, 216, 134);
        rect(0, 350, width, 50);
        bezier(0, 350, 150, 300, 200, 350, 400, 350);
        
        for(var i = 0; i < 80; i ++){
            (fill)(random(255), random(50));
            rect(random(400), random(350, 400), random(5, 15), random(5), 10);
        }
        
        for(var hi = 0; hi < 5; hi ++){
            pushMatrix();
            translate(random(400), random(300, 320));
            noFill();
            strokeWeight(7);
            stroke(0, 0, 0, 20);
            line(-3, 52, 7, 52);
            strokeWeight(6);
            stroke(184, 114, 79);
            bezier(0, -50, 15, -19, 10, 7, 0, 50);
            bezier(0, -50, 15, -19, 10, 7, 4, 50);
            noStroke();
            for(var i = 0; i < 360; i += 45){
                pushMatrix();
                translate(0, -47);
                scale(1, 0.6);
                rotate(i);
                fill(114, 196, 78);
                arc(24, 0, 50, 22, -180, 0);
                fill(0, 0, 0, 30);
                arc(24, 0, 50, 11, -180, 0);
                popMatrix();
            }
            popMatrix();
        }
        
        filter(BLUR, 2);
        
        return get(0, 0, width, height);
    },
};

var mouse = {
    get x(){ return mouseX; },
    get y(){ return mouseY; },
    released: false,
    pressed: false,
};

var Player = function(){
    this.x = 50;
    this.y = 200;
    this.w = 30;
    this.h = 30;
    
    this.xPower = 0;
    
    this.maxY = 250;
    this.yvel = -5;
    this.minusYVel = 0.1;
    
    this.jumping = false;
};
Player.prototype.draw = function() {
    noStroke();
    
    fill(0, 0, 0, 30);
    rect(this.x, this.y - 10, 30, 5);
    fill(0, 255, 0);
    rect(this.x, this.y - 10, this.xPower * 6.3, 5);
    fill(255, 255, 255);
    rect(this.x, this.y, this.w, this.h, 5);
    
    if(mouse.pressed && !this.jumping && !completed){
        this.xPower += 0.15;
        if(this.xPower > 4.5){
            this.xPower = 4.5;
        }
    }
    if(mouse.released && !this.jumping && !completed){
        this.yvel = -5;
        this.jumping = true;
    }
    if(this.jumping){
        this.y += this.yvel;
        this.yvel += this.minusYVel;
        this.x += this.xPower;
    }
    if(this.x < 0){
        this.x = 0;
    }
};
var player = new Player();

var Island = function(x, firstPlatform){
    this.x = x;
    this.y = 230;
    this.w = 100 - (stage * 15);
    this.h = 170;
    this.xSpeed = -3;
    this.extraX = 300;
    
    this.baseColor = color(207, 168, 89);
    this.topColor = color(54, 227, 74);
    
    this.firstPlatform = firstPlatform;
    
    this.grass = [];
    for(var i = 0; i < this.w - 4; i += 4){
        this.grass.push({x: i, y: 5, w: 5, h: random(5)});
    }
    this.dirt = [];
    for(var i = 0; i < this.h; i += 15){
        this.dirt.push({x: random(2.5, this.w - 10), y: i + random(-5, 5), w: random(0, 20), h: random(5)});
    }
};
var islands = [new Island(50, true), new Island(random(80, width), false)];
Island.prototype.draw = function() {
    switch(stage){
        case 0:
            this.baseColor = color(51, 100, 122);
            this.topColor = color(116, 156, 168);
            break;
        case 1:
            this.baseColor = color(207, 168, 89);
            this.topColor = color(54, 227, 74);
            break;
        case 2:
            this.baseColor = color(232, 232, 232);
            this.topColor = color(232, 174, 67);
            break;
        case 3:
            this.baseColor = color(125, 125, 125);
            this.topColor = color(171, 171, 171);
            break;
        case 4:
            this.baseColor = color(61, 61, 61);
            this.topColor = color(59, 59, 59);
            break;
    }
    
    pushMatrix();
    translate(this.x + this.extraX, this.y);
    fill(this.baseColor);
    rect(2.5, 0, this.w - 5, this.h);
    for(var i in this.dirt){
        fill(0, 0, 0, 30);
        rect(this.dirt[i].x, this.dirt[i].y + 4, this.dirt[i].w, this.dirt[i].h);
    }
    fill(255, 255, 255, 30);
    rect(2.5, 0, this.w - 5, this.h/2);
    fill(this.topColor);
    rect(0, 0, this.w, 10);
    fill(255, 255, 255, 30);
    rect(0, 0, this.w, 5, 3);
    fill(this.topColor);
    for(var i in this.grass){
        rect(this.grass[i].x, this.grass[i].y + 4, this.grass[i].w, this.grass[i].h);
    }
    popMatrix();
    
    if(rectCollide(this, player) && player.yvel > 1 && player.y < this.y){
        score ++;
        player.xPower = 0;
        player.yvel = 0;
        player.y = this.y - player.h;
        player.jumping = false;
        completed = true;
    }
    if(rectCollide(this, player) && player.yvel > 1 && player.y > this.y){
        player.xPower = 0;
    }
    if(completed){
        this.x += this.xSpeed;
        player.x += this.xSpeed / islands.length;
    }
    if(this.x <= 0 && !this.firstPlatform){
        completed = false;
        islands.push(new Island(random(80, width), false));
        this.firstPlatform = true;
    }
    this.extraX /= 1.1;
};

mousePressed = function(){
    mouse.pressed = true;
};
mouseReleased = function(){
    mouse.pressed = false;
    mouse.released = true;
};

var mountain = function(x, y, sz){
    pushMatrix();
    translate(x, y);
    scale(sz/10);
    noStroke();
    fill(121, 149, 171);
    triangle(-50, 350, 75, 230, 200, 350);
    fill(0, 0, 0, 30);
    triangle(145, 350, 75, 230, 200, 350);
    fill(255);
    beginShape();
    vertex(43, 260);
    vertex(43, 268);
    vertex(55, 257);
    vertex(62, 262);
    vertex(66, 255);
    vertex(77, 263);
    vertex(82, 255);
    vertex(85, 261);
    vertex(91, 255);
    vertex(103, 260);
    vertex(107, 260);
    vertex(75, 230);
    endShape();
    popMatrix();
};
var tree1 = function(x, y, sz){
    pushMatrix();
    translate(x, y);
    scale(sz/10);
    noStroke();
    fill(255, 183, 0);
    beginShape();
    vertex(0, -50);
    vertex(-15, 0);
    vertex(-11, 5);
    vertex(-18, 25);
    vertex(-13, 28);
    vertex(-19, 40);
    vertex(19, 40);
    vertex(13, 28); 
    vertex(18, 25);
    vertex(11, 5);
    vertex(15, 0);
    endShape();
    fill(204, 175, 122);
    rect(-2, 0, 4, 50, 10);
    strokeWeight(1);
    stroke(204, 175, 122);
    line(-2, 7, -8, 0);
    line(2, 7, 8, 0);
    line(-2, 24, -10, 14);
    line(2, 24, 10, 14);
    line(-2, 34, -10, 25);
    line(2, 34, 10, 25);
    noStroke();
    popMatrix();
};
var bubbles = [];
var waterBG = function(){
    if(bubbles.length < 200){
        bubbles.push({x: random(400, 800), y: random(height), sz: random(50), sp: random(1, 15), sinAmt: random(30), sinAmt2: random(10)});
    }
    
    noStroke();
    for(var i = 0; i < height; i += 10){
        fill(lerpColor(
            color(45, 209, 227), color(0, 87, 158), i/height));
        rect(0, i, 400, 10);
    }
    fill(227, 179, 102);
    rect(0, 350, 400, 10);
    fill(242, 192, 106);
    rect(0, 360, 400, 50);
    
    for(var i in bubbles){
        fill(255, 255, 255, 50);
        ellipse(bubbles[i].x, bubbles[i].y + sin(frameCount*bubbles[i].sinAmt2)*bubbles[i].sinAmt, bubbles[i].sz, bubbles[i].sz);
        ellipse(bubbles[i].x - bubbles[i].sz/6, bubbles[i].y - bubbles[i].sz/6 + sin(frameCount*bubbles[i].sinAmt2)*bubbles[i].sinAmt, bubbles[i].sz/2, bubbles[i].sz/2);
        bubbles[i].x -= bubbles[i].sz/5;
        if(bubbles[i].x < -50){
            bubbles[i].x = 450;
        }
    }
};
var beachBG = function(){
    noStroke();
    background(109, 211, 237);
    fill(31, 180, 217);
    rect(0, 150, 400, 200);
    fill(132, 230, 76);
    rect(0, 350, 400, 10);
    fill(118, 207, 29);
    rect(0, 360, 400, 50);
    for(var i = 0; i < width+5; i += 10){
        for(var j = 335; j < 413; j += 18){
            fill(-102 + j, -150 + j, 114);
            ellipse(i, j + sin(i*5)*3, 20, 20);
        }
    }
};
var forestBG = function(){
    background(219, 251, 255);
    mountain(0, 0, 10);
    mountain(100, -105, 13);
    mountain(246, 0, 10);
    fill(132, 230, 76);
    rect(0, 350, 400, 10);
    fill(118, 207, 29);
    rect(0, 360, 400, 50);
    for(var i = 0; i < width; i += 30){
        tree1(i, 305, sin(i*5)*4 + 10);
        tree1(i + 16, 305, sin(i*3)*1 + 10);
    }
};
var mountainBG = function(){
    background(219, 251, 255);
    mountain(-102, -280, 18);
    mountain(74, -241, 17);
    mountain(246, -194, 16);
    fill(132, 230, 76);
    rect(0, 350, 400, 10);
    fill(118, 207, 29);
    rect(0, 360, 400, 50);
};
var nightMountainBG = function(){
    background(219, 251, 255);
    mountain(0, 0, 10);
    mountain(100, -105, 13);
    mountain(246, 0, 10);
    fill(132, 230, 76);
    rect(0, 350, 400, 10);
    fill(118, 207, 29);
    rect(0, 360, 400, 50);
};

draw = function() {
    // Load all images in first frame
    for(var i in images){
        if (typeof images[i] !== "object") {
            colorMode(RGB, 255);
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    if(scene === 'Menu'){
        image(images.beachBG, 0, 0);
        textSize(65);
        textLeading(60);
        fill(250);
        text('ISLAND\nJUMPER', width / 2, height / 2);
    }
    if(scene === 'Game'){
        switch(stage){
            case 0:
                waterBG();
                break;
            case 1:
                beachBG();
                break;
            case 2:
                forestBG();
                break;
            case 3:
                mountainBG();
                break;
            case 4:
                nightMountainBG();
                break;
        }
        
        fill(255, 255, 255, 100);
        textSize(70);
        text(score, 200, 200);
        
        for(var i in islands){
            islands[i].draw();
            if(islands[i].x < -islands[i].w){
                islands.splice(i, 1);
            }
        }
        player.draw();
        
        if(score >= 5){
            stage ++;
            score = 0;
        }
    }
    
    mouse.released = false;
};
