rectMode(CENTER);

var rectCollide = function(one, two){
    return one.x+one.w > two.x &&
        one.y+one.h > two.y &&
        one.x < two.x+two.w &&
        one.y < two.y+two.h;
};

var scene = 'Game';
var overButton = false;

var clicked = false;
mouseClicked = function(){ clicked = true; };

var hill = function(x, y, w, h, colo){
    pushMatrix();
    translate(x, y);
    scale(w / 50, h / 50);
    fill(colo);
    rect(0, 104, 100, 196);
    fill(0, 0, 0, 20);
    for(var i = 0; i < 100; i += 20){
        rect(i - 40, 2 + noise(i/7, 0.61) * 62, 20, 50, 50);
    }
    fill(198, 219, 228);
    rect(0, 15, 100, 30);
    for(var i = 0; i < 100; i += 20){
        rect(i - 40, -4 + noise(i/7, 0.61) * 62, 20, 50, 50);
    }
    fill(214, 234, 243);
    
    arc(0, 0, 100, 100, -180, 0);
    for(var i = 0; i < 100; i += 20){
        rect(i - 40, -17 + noise(i/7, 0.37) * 62, 20, 50, 50);
    }
    popMatrix();
};
var mountain = function(x, y, sz, colo){
    pushMatrix();
    translate(x, y);
    rotate(45);
    scale(sz / 50);
    fill(colo);
    rect(0, 0, 200, 200, 50);
    fill(88, 204, 212);
    (rect)(-60, -60, 80, 80, 30, 0, 0, 0);
    rotate(-45);
    fill(colo);
    rect(0, -54, 113, 59);
    fill(88, 204, 212);
    arc(-14, -86, 30, 20, 0, 180);
    arc(13, -86, 30, 20, 0, 180);
    arc(42, -86, 30, 20, 7, 191);
    arc(-43, -86, 30, 20, 0, 176);
    popMatrix();
};

var images = {
    frost: function(){
        for(var i = 0; i < 400; i += 5){
            strokeWeight(random(3));
            stroke(255, 255, 255, 30);
            line(random(400), 0, random(400), 400);
            line(400, random(400), 0, random(400));
        }
        
        return get(0, 0, width, height);
    },
    snowBG: function(){
        background(130, 232, 237);
        noStroke();
        mountain(97, 166, 40, color(53, 153, 160));
        mountain(315, 166, 40, color(53, 153, 160));
        mountain(200, 160, 40, color(62, 178, 188));
        mountain(376, 156, 40, color(62, 178, 188));
        hill(45, 127, 55, 55, color(128, 175, 196));
        hill(-8, 234, 45, 45, color(90, 121, 136));
        hill(285, 161, 45, 45, color(90, 121, 136));
        hill(123, 201, 40, 40, color(90, 121, 136));
        hill(200, 219, 50, 50, color(128, 175, 196));
        hill(366, 219, 40, 40, color(128, 175, 196));
        
        return get(0, 0, width, height);
    },
    blurredBG: function(){
        image(images.snowBG, 0, 0);
        filter(BLUR, 2);
        
        return get(0, 0, width, height);
    },
};

var Snow = function(){
    this.x = random(width);
    this.y = -30;
    this.sz = random(1, 10);
};
Snow.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    rotate(frameCount*5 + this.y);
    fill(214, 234, 243, 50);
    ellipse(0, 0, this.sz, this.sz * 2);
    ellipse(0, 0, this.sz * 2, this.sz);
    fill(214, 234, 243);
    ellipse(0, 0, this.sz / 5, this.sz);
    ellipse(0, 0, this.sz, this.sz / 5);
    popMatrix();
    
    this.y += this.sz / 3;
    this.x += this.sz / 13;
};
var Snows = [];

var menu;

var txtButton = function(y, txt, nxt){
    this.x = 15;
    this.y = y;
    this.txt = txt;
    this.nxt = nxt;
    this.colo = [0, 0, 0];
    this.sz = 0.5;
};
txtButton.prototype.draw = function() {
    textAlign(LEFT, CENTER);

    textSize(15);
    pushMatrix();
    translate(this.x, this.y);
    scale(1.5 - this.sz);
    fill(this.colo[0], this.colo[1], this.colo[2]);
    text(this.txt, 0, 0);
    popMatrix();
    
    // 53, 153, 160
    if(mouseY > this.y - 10 && mouseY < this.y + 10){
        overButton = true;
        this.sz  += (0.01 - this.sz)/5;
        this.colo[0] += (53 - this.colo[0])/5;
        this.colo[1] += (153 - this.colo[1])/5;
        this.colo[2] += (160 - this.colo[2])/5;
        this.x += (20 - this.x)/5;
        if(clicked){
            if(this.txt === 'home'){ 
                menu.slide = 'out';
            } else if (this.txt === 'play'){
                scene = 'Game';
            } else {
                menu.slide = 'in';
                menu.title = this.txt;
            }
        }
    } else {
        this.sz  += (0.5 - this.sz)/5;
        this.colo[0] += (0.1 - this.colo[0])/5;
        this.colo[1] += (0.1 - this.colo[1])/5;
        this.colo[2] += (0.1 - this.colo[2])/5;
        this.x += (15 - this.x)/5;
    }
};
var txtButtons = {
    menu: [
        new txtButton(170, 'play', 'Game'),
        new txtButton(230, 'how', 'Game'),
        new txtButton(260, 'credits', 'Game'),
        new txtButton(200, 'home', 'Home'),
        new txtButton(290, 'story', 'Game'),
        new txtButton(140, 'about', 'Game'),
        new txtButton(110, 'settings', 'Game'),
    ],
};

var logo = function(x, y, sz){
    var logoColors = [
        color(17, 67, 138),
        color(87, 156, 217),
        color(56, 179, 255),
        color(69, 192, 230),
    ];
    
    pushMatrix();
    translate(x, y);
    scale(sz);
    noFill();
    strokeCap(SQUARE);
    strokeWeight(44);
    stroke(136, 167, 207);
    arc(5, 8, 170, 170, -333, -30);
    strokeWeight(11);
    // Outer layer
    stroke(logoColors[0]);
    arc(0, 0, 200, 200, -85, -30);
    arc(0, 0, 180, 180, -75, -30);
    arc(0, 0, 200, 200, -300, -240);
    arc(0, 0, 180, 180, -285, -250);
    stroke(logoColors[1]);
    arc(0, 0, 200, 200, -125, -85);
    arc(0, 0, 180, 180, -115, -75);
    arc(0, 0, 200, 200, -200, -160);
    arc(0, 0, 180, 180, -200, -150);
    stroke(logoColors[2]);
    arc(0, 0, 200, 200, -160, -125);
    arc(0, 0, 180, 180, -150, -116);
    arc(0, 0, 200, 200, -330, -300);
    arc(0, 0, 180, 180, -330, -286);
    stroke(logoColors[3]);
    arc(0, 0, 200, 200, -240, -200);
    arc(0, 0, 180, 180, -250, -200);
    
    // Inner layer
    stroke(logoColors[0]);
    arc(0, 0, 160, 160, -200, -160);
    arc(0, 0, 140, 140, -200, -150);
    stroke(logoColors[1]);
    arc(0, 0, 160, 160, -300, -240);
    arc(0, 0, 140, 140, -285, -250);
    stroke(logoColors[2]);
    arc(0, 0, 160, 160, -240, -200);
    arc(0, 0, 140, 140, -250, -200);
    arc(0, 0, 160, 160, -125, -85);
    arc(0, 0, 140, 140, -115, -75);
    stroke(logoColors[3]);
    arc(0, 0, 160, 160, -85, -30);
    arc(0, 0, 140, 140, -75, -30);
    arc(0, 0, 160, 160, -330, -300);
    arc(0, 0, 140, 140, -330, -286);
    arc(0, 0, 160, 160, -160, -125);
    arc(0, 0, 140, 140, -150, -116);
    
    stroke(0, 0, 0, 50);
    strokeWeight(20);
    arc(0, 0, 150, 150, 30, 330);
    
    strokeWeight(20);
    stroke(255, 255, 255, 130);
    arc(0, 0, 183, 183, -180, -81);
    arc(0, 0, 154, 156, -325, -289);
    popMatrix();
};

var Menu = function(){
    this.slide = 'none';
    this.x = 295;
    this.title = 'about';
    this.txt = 'This game was made in December 2017 by Chester Banks as an entry to Legolas Greenleaf\'s Christmas Contest.';
};
Menu.prototype.draw = function() {
    image(images.snowBG, 0, 0);
    Snows.push(new Snow());
    for(var i = Snows.length - 1; i >= 0; i --){
        Snows[i].draw();
        if(Snows[i].y > 350){
            Snows.splice(i, 1);
        }
    }
    
    fill(214, 234, 243);
    beginShape();
    vertex(400, 400);
    vertex(0, 400);
    vertex(0, 300);
    bezierVertex(146, 223, 265, 361, 400, 300);
    endShape();
    fill(190, 217, 227);
    beginShape();
    vertex(400, 400);
    vertex(0, 400);
    vertex(0, 325);
    bezierVertex(146, 239, 265, 384, 400, 325);
    endShape();
    fill(155, 190, 207);
    beginShape();
    vertex(400, 400);
    vertex(0, 400);
    vertex(0, 350);
    bezierVertex(146, 265, 265, 402, 400, 350);
    endShape();
    
    textFont(createFont('Century Gothic Bold'));
    textAlign(CENTER, CENTER);
    
    pushMatrix();
    translate(295 - this.x, 0);
    fill(0, 0, 0, 30);
    rect(230, 182, 190, 55);
    rect(200, 231, 130, 55);
    fill(0);
    rect(230, 175, 190, 55);
    fill(255, 255, 255);
    rect(200, 225, 130, 55);
    textSize(50);
    fill(255);
    text('WINTER', 230, 175);
    fill(0);
    text('WAR', 200, 225);
    fill(0, 0, 0);
    textSize(16);
    text('C H E S T E R  B A N K S', 222, 136);
    fill(255);
    popMatrix();
    //text('E N I G M A', 181, 116);
    
    fill(0, 0, 0, 50);
    textSize(16);
    text('december 2017', 322, 384);
    
    pushMatrix();
    translate(this.x, 0);
    pushStyle();
    textFont(createFont('Century Gothic'));
    textAlign(LEFT, TOP);
    fill(255, 255, 255);
    textSize(50);
    text(this.title, 130, 55);
    fill(255, 255, 255, 150);
    rect(256, 228, 267, 230, 10);
    fill(0);
    textSize(14);
    if(this.title === 'story'){ textSize(12); }
    text(this.txt, 135, 123, 243, 350);
    popStyle();
    popMatrix();
    
    rectMode(CENTER);
    noStroke();
    fill(255, 255, 255, 30);
    for(var i = 0; i < 400; i += 20){
        rect(57, 200, 115, i);
    }
    for(var i = 0; i < txtButtons.menu.length; i ++){
        txtButtons.menu[i].draw();
    }
    
    if(this.slide === 'in'){
        this.x += (1 - this.x) / 10;
    }
    if(this.slide === 'out'){
        this.x += (295 - this.x) / 5;
    }
    
    switch(this.title){
        case 'about':
            this.txt = 'This game was made in December 2017 by Chester Banks as an entry to Legolas Greenleaf\'s Christmas Contest.';
        break;
        case 'credits':
            this.txt = '> Jett for the idea for the storyline\n\n> Google for the background image\n\nI made the rest!';
        break;
        case 'how':
            this.txt = '> Move with the arrow keys\n\n> Collect the coins\n\n> Avoid the fire monsters\n\n> Jump on the ice flowers to freeze all the fire monsters\n\n> The gifts hold weapons';
        break;
        case 'settings':
            this.txt = '';
        break;
        case 'story':
            this.txt = 'You are the Prince of Snowtopia. For your birthday, you were able to go visit the Lake of Lortenium, where you can see the future in the reflection.\n\nWhen you looked in, you saw your land under the control of the Fire Lords.\n\nYou rushed back to Snowtopia, but it has already happened! The Fire Lords are roaming Snowtopia.\n\nCan you rid Snowtopia of the Fire Lords and save your land?';
        break;
    }
};
menu = new Menu();

var keys = [];
keyPressed = function(){
    keys[keyCode] = true;
};
keyReleased = function(){
    keys[keyCode] = false;
};

var Block = function(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
};
Block.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    fill(214, 234, 243, 20);
    for(var i = 50; i > 10; i -= 5){
        rect(0, 0, this.w, i);
    }
    fill(155, 190, 207);
    rect(0, 0, this.w, this.h);
    fill(190, 217, 227);
    rect(0, 0, this.w, this.h / 3);
    fill(214, 234, 243);
    rect(0, -4, this.w, this.h / 5);
    popMatrix();
};
var Blocks = [];
var possiblePos = [0, 100, 200];
for(var i = 280; i > -600; i -= 70){
    Blocks.push(new Block(possiblePos[abs(i/70)%3], i, 200, 20));
}

var Player = function(){
    this.x = 200;
    this.y = 315;
    this.w = 30;
    this.h = 30;
    this.xvel = 0;
    this.yvel = 0;
    this.maxX = 5;
    this.jumping = false;
};
Player.prototype.applyCollisions = function(xvel, yvel) {
    for (var i = 0; i < Blocks.length; i++) {
        if (!rectCollide(this, Blocks[i])) { continue; }
        if (xvel < 0) {
            this.x = Blocks[i].x + Blocks[i].w;
            this.xvel = 0;
        }
        if (xvel > 0) {
            this.x = Blocks[i].x - this.w;
            this.xvel = 0;
        }
        if (yvel < 0) {
            this.y = Blocks[i].y + Blocks[i].h;
            this.yvel = 0;
        }
        if (yvel > 0) {
            this.y = Blocks[i].y - this.h;
            this.yvel = 0;
            this.jumping = false;
        }
    }
    if (this.y >= 315 && this.yvel > 0) {
        this.jumping = false;
        this.yvel = 0;
        this.y = 315;
    }
};
Player.prototype.draw = function() {
    noStroke();
    fill(212, 212, 212);
    rect(this.x, this.y, this.w, this.h, 5);
    
    if(keys[RIGHT]){
        this.xvel ++;
    }
    if(keys[LEFT]){
        this.xvel --;
    }
    if(!keys[LEFT] && !keys[RIGHT]){
        this.xvel /= 1.1;
    }
    if(this.xvel < 0.1 && this.xvel > 0.1){ 
        this.xvel = 0; 
    }
    this.xvel = constrain(this.xvel, -this.maxX, this.maxX);
    
    if ((keys[UP] || keys[87]) && !this.jumping) {
        this.yvel -= 11;
        this.jumping = true;
    }
    
    this.jumping = true;
    this.x += this.xvel;
    this.applyCollisions(this.xvel, 0);
    this.y += this.yvel;
    this.applyCollisions(0, this.yvel);
    this.yvel += 0.6;
};
var player = new Player();

// Camera - thank you to Lionofgd
var Camera = {
    y: 0
};

draw = function() {
    for(var i in images){
        if(typeof images[i] !== 'object'){
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    rectMode(CENTER);
    if(scene === 'Logo'){
        background(201, 254, 255);
        logo(200, 200, 1.2);
        
        stroke(127, 225, 227);
        pushMatrix();
        translate(200, 200);
        rotate(frameCount * 1.7);
        arc(0, 0, 310, 320, 0, 180 - cos(frameCount*1)*150);
        popMatrix();
        
        image(images.frost, 0, 0);
        
        if(frameCount > 180 || clicked){
            scene = 'Menu';
        }
    }
    if(scene === 'Menu'){
        menu.draw();
    }
    if(scene === 'Game'){
        image(images.blurredBG, 0, 0);
        
        Snows.push(new Snow());
        for(var i = Snows.length - 1; i >= 0; i --){
            Snows[i].draw();
            if(Snows[i].y > 450){
                Snows.splice(i, 1);
            }
        }
        
        pushMatrix();
        translate(0, Camera.y);
        if(player.y < 200){
            Camera.y -= (Camera.y - (200 - player.y)) / 15;
        }
        noStroke();
        rectMode(CORNER);
        fill(214, 234, 243);
        rect(0, 340, 400, 30);
        fill(190, 217, 227);
        rect(0, 350, 400, 40);
        fill(155, 190, 207);
        rect(0, 370, 400, 60);
        
        for(var i = Blocks.length - 1; i >= 0; i --){
            Blocks[i].draw();
        }
        player.draw();
        popMatrix();
    }
    
    cursor(overButton ? 'pointer' : 'default');
    
    overButton = false;
    clicked = false;
};
