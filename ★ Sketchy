/**
 * S K E T C H Y
 * Chester Banks
 * March 12 2018
 * 
 * This project has been a WIP for wayyy too long - decided to finally finish it.
 * 
 * Have a complaint? Compliment? Constructive criticism? Destructive criticism? Question? Suggestion? Advice? Rating? Review? Leave them all in the Tips & Thanks (except for questions, those can go in the Questions)!
*/


/**
 * WORK LOG
  = Menu, basic gameplay, rockets, rocks, shop, how pages done (before 4/12/17)
  = Bombs (4/12/17)
*/

/*
    

    TO ADD:
     1. Bomb power
     2. Cloak power
     3. Logo (more minimal) 
     4. Score calculation screen, with bonus coins
     5. Transitions
     6. Shop background?
     7. Power displays (choose which 5 powers you will use before the game, and then display those)
     8. Lucky subscriber text & easter eggs
     9. Get feedback from fellow programmers
        a) SlingBlade
        b) Planet
        c) AlexT
        d) Isaac Emerald
     10. Release
*/

// Text settings
textAlign(CENTER, CENTER); // center text

// Font settings - load fonts here instead of in the draw function.
var fonts = {
    titles: createFont('HelveticaNeue-UltraLight'),
    small: createFont('HelveticaNeue-Thin'),
    coin: createFont('Verdana'),
};

var scene = 'Game'; // Scene variable
var coins = 100; // Amount of coins
var timer = 0; // Timer variable

// Key movement
var keys = [];
var keyPressed = function(){ keys[keyCode] = true; };
var keyReleased = function(){ keys[keyCode] = false; };

// Mouse properties
var clicked = false, overButton = false;
mouseClicked = function(){ clicked = true; };

// Circle vs. Circle collision detector
var circleCollide = function(object1, object2){
    return dist(object1.x, object1.y, object2.x, object2.y) <= (object1.sz / 2) + (object2.sz / 2);
};

// Pre-loaded images
var images = {
    'homeBG': function(){
        background(255);
        noFill();
        stroke(0);
        strokeWeight(1);
        bezier(5, 435, 138, 399, 202, 525, 327, 527);
        bezier(591, 492, 506, 453, 402, 525, 350, 527);
        noStroke();
        fill(255);
        ellipse(200, 500, 70, 86);
        fill(217, 237, 86);
        ellipse(456, 80, 90, 91);
        fill(38, 227, 79);
        ellipse(480, 462, 31, 47);
        ellipse(191, 500, 59, 82);
        fill(217, 167, 126);
        bezier(284, 600, 310, 552, 294, 567, 350, 530);
        bezier(282, 600, 333, 581, 297, 551, 350, 530);
        noFill();
        stroke(217, 167, 126);
        strokeWeight(5);
        arc(353, 434, 395, 284, -322, -310);
        strokeWeight(8);
        arc(361, 434, 395, 284, -337, -308);
        stroke(0);
        strokeWeight(1);
        
        // Sun beams
        for(var i = 0; i < 360; i += 30){
            pushMatrix();
            translate(470, 85);
            rotate(i);
            stroke(0);
            line(0, 60, 0, 75 + noise(i, i + -6.1)*5);
            popMatrix();
        }
        
        // Hill
        bezier(5, 591, 213, 582, 285, 450, 587, 594);
        
        // Paths
        arc(298, 427, 519, 276, -335, -306);
        arc(376, 427, 382, 312, -337, -308);
        arc(566, 600, 650, 222, -179, -142);
        arc(500, 600, 369, 222, -180, -142);
        
        // Trees
        ellipse(200, 500, 70, 85);
        ellipse(475, 457, 40, 55);
        
        // Sun
        ellipse(470, 85, 100, 100);
        
        // Clouds
        strokeWeight(1);
        pushMatrix();
        translate(-145, 53);
        arc(300, 100, 200, 30, 10, 170);
        arc(223, 90, 50, 50, 150, 340);
        arc(294, 64, 100, 100, 161, 361);
        arc(371, 65, 55, 55, 184, 401);
        arc(407, 88, 30, 30, 202, 476);
        popMatrix();
        pushMatrix();
        translate(332, 185);
        scale(0.5);
        strokeWeight(1);
        arc(300, 100, 200, 30, 10, 170);
        arc(223, 90, 50, 50, 150, 340);
        arc(294, 64, 100, 100, 161, 361);
        arc(371, 65, 55, 55, 184, 401);
        arc(407, 88, 30, 30, 202, 476);
        popMatrix();
        
        // Tree trunks
        fill(255);
        triangle(200, 530, 195, 573, 205, 570);
        triangle(476, 479, 482, 506, 474, 502);
        line(195, 568, 200, 566);
        line(199, 558, 203, 556);
        line(479, 500, 474, 497);
        
        return get(0, 0, width, height);
    },
    'logoBG': function(){
        background(0, 0, 0);
        
        colorMode(HSB);
        for(var k = 0; k < 203; k ++){
            pushMatrix();
            translate(random(width), random(height));
                stroke(random(255), 255, 255, random(255));
            for(var i = 0; i < 131; i += 5){
                pushMatrix();
                rotate(random(360));
                strokeWeight(random(10));
                point(random(35), 0);
                popMatrix();
            }
            popMatrix();
        }
        
        colorMode(RGB);

        
        return get(0, 0, width, height);
    },
    'logoFG': function(){
        strokeCap(SQUARE);
        noFill();
        strokeWeight(50);
        stroke(0);
        arc(317, 324, 286, 313, 36, 327);
        
        for(var r = 119; r < 411; r += 1){
            for(var i = 0; i < 80; i += 5){
                pushMatrix();
                translate(300 + sin(r) * 150, 300 + cos(r) * 150);
                rotate(random(360));
                stroke(255, 255, 255);
                strokeWeight(random(10));
                point(random(35), 0);
                stroke(0, 0, 0);
                strokeWeight(random(5));
                point(random(35), 0);
                popMatrix();
            }
        
        }
        
        return get(0, 0, 600, 600);
    },
};

// Button object
var button = function(x, y, w, h, txt, nxt, txtSz){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.txt = txt;
    this.nxt = nxt;
    this.txtSz = txtSz || 30;
    this.lineX = this.w / 2;
    this.move = false;
};
button.prototype.draw = function() {
    textFont(fonts.titles, this.txtSz);
    text(this.txt, this.x, this.y);
    
    strokeWeight(1);
    stroke(0);
    if(this.lineX < this.w / 2){
        line(this.x - (this.w / 2) + this.lineX, this.y + (this.h / 2), this.x + (this.w / 2) - this.lineX, this.y + (this.h / 2));
    }
    
    if(mouseX > this.x - (this.w / 2) && mouseX < this.x + (this.w / 2) && mouseY > this.y - (this.h / 2) && mouseY < this.y + (this.h / 2)){
        overButton = true;
        this.move = true;
        if(clicked){
            scene = this.nxt;
            this.lineX = this.w / 2;
            this.move = false;
        }
    }
    
    if(this.lineX < 1){
        this.move = false;
    }
    
    if(this.move){
        this.lineX /= 1.1;
    } else {
        this.lineX *= 1.1;
    }
    
    this.lineX = constrain(this.lineX, 0.1, this.w / 2);
};
var buttons = {
    play: new button(300, 340, 120, 50, 'P L A Y', 'Game'),
    shop: new button(300, 390, 120, 50, 'S H O P', 'Shop'),
    how: new button(300, 440, 120, 50, 'H O W', 'How'),
    back: new button(80, 560, 120, 50, 'B A C K', 'Menu'),
};

// Alert object
var Alert = function(title, desc, img){
    this.title = title;
    this.desc = desc;
    this.img = img;
    
    this.s = 0.99;
    this.leave = false;
};
Alert.prototype.draw = function() {
    pushStyle();
    rectMode(CENTER);
    pushMatrix();
    translate(width / 2, height / 2);
    scale(1 - this.s);
    strokeWeight(6);
    stroke(0, 0, 0, 50);
    fill(255, 255, 255);
    rect(0, 0, 300, 150, 10);
    strokeWeight(2);
    line(-150, -28, 150, -28);
    if(this.img){
        strokeWeight(6);
        rect(-160, 0, 80, 120, 10);
        //image(images.candycane, -200, -50, 80, 100);
    }
    
    fill(61, 61, 61);
    textFont(fonts.titles, 29);
    text(this.title, 0, -50);
    textFont(fonts.small, 15);
    textLeading(19);
    text(this.desc, -120, -45, 240, 111);
    
    if(mouseX > 445 - 12 && mouseX < 457 && mouseY > 230 - 12 && mouseY < 242){
        strokeWeight(3);
        stroke(161, 47, 47);
        fill(230, 23, 23);
        rect(145, -67, 25, 25, 5);
        
        textFont(fonts.small, 18);
        fill(255);
        text('X', 145, -67);
        if(clicked){
            this.leave = true;
        }
    } else {
        strokeWeight(3);
        stroke(161, 47, 47);
        fill(230, 23, 23);
        rect(145, -67, 25, 25, 5);
        rect(145, -70, 25, 25, 5);
        
        textFont(fonts.small, 18);
        fill(255);
        text('X', 145, -70);
    }
    
    popMatrix();
    popStyle();
    
    if(this.s > 0.01 && !this.leave){ 
        this.s /= 1.1; 
    }
    if(this.leave){
        this.s *= 1.1;
    }
};
var Alerts = [];

// Data for shop
var shop = [
    {name: 'Speed', price: 10, bought: false, y: 100, info: 'Move twice as fast for five seconds.'},
    {name: 'Health', price: 10, bought: false, y: 100, info: 'Refill your health'},
    {name: 'Forcefield', price: 30, bought: false, y: 100, info: 'Protective bubble surrounds you for five seconds.'},
    {name: 'Bomb', price: 10, bought: false, y: 250, info: 'Destroys all objects (excluding you) within a five foot raidus.'},
    {name: 'Cloak', price: 15, bought: false, y: 250, info: 'Hides you from everything that follows you.'},
    {name: 'Magnet', price: 10, bought: false, y: 250, info: 'Attracts nearby coins.'},
];

// Power up variables
var forcefield = false;
var magnet = false;
var speed = false;

// Player 
var Player = function(){
    this.x = 300;
    this.y = 200;
    this.sz = 30;
    
    this.xvel = 0;
    this.yvel = 0;
    
    this.acceleration = 0.3;
    this.maxSpeed = 5;
    
    this.health = this.sz;
};
Player.prototype.draw = function() {
    if(speed){
        this.acceleration = 0.6;
        this.maxSpeed = 10;
    } else {
        this.acceleration = 0.3;
        this.maxSpeed = 5;
    }
    
    noStroke();
    fill(0, 0, 0, 30);
    rect(this.x - (this.sz / 2), this.y - this.sz, this.sz, this.sz/5);
    fill(0, 255, 0);
    rect(this.x - (this.sz / 2), this.y - this.sz, this.health, this.sz/5);
    fill(240, 217, 163);
    ellipse(this.x + 3, this.y + 3, this.sz / 1.1, this.sz / 1.1);
    noFill();
    strokeWeight(1);
    stroke(115, 190, 209);
    // Forcefield
    if(forcefield){
        ellipse(this.x, this.y, this.sz * 1.8, this.sz * 1.8);
    }
    
    stroke(18, 18, 18);
    // Player
    ellipse(this.x, this.y, this.sz, this.sz);
    fill(38, 38, 38);
    ellipse(this.x - 5 + this.xvel, this.y + this.yvel, 3, 8);
    ellipse(this.x + 5 + this.xvel, this.y + this.yvel, 3, 10);
    
    if(keys[RIGHT]){
        this.xvel += this.acceleration;
    }
    if(keys[LEFT]){
        this.xvel -= this.acceleration;
    }
    if(keys[UP]){
        this.yvel -= this.acceleration;
    }
    if(keys[DOWN]){
        this.yvel += this.acceleration;
    }
    
    if(!keys[RIGHT] && !keys[LEFT]){
        this.xvel /= 1.05;
    }
    if(!keys[UP] && !keys[DOWN]){
        this.yvel /= 1.05;
    }
    
    this.x += this.xvel;
    this.y += this.yvel;
    
    this.xvel = constrain(this.xvel, -this.maxSpeed, this.maxSpeed);
    this.yvel = constrain(this.yvel, -this.maxSpeed, this.maxSpeed);
    this.x = constrain(this.x, 50 + (this.sz / 2), 550 - (this.sz / 2));
    this.y = constrain(this.y, 50 + (this.sz / 2), 450 - (this.sz / 2));
    
    if((this.xvel < 0.1 && this.xvel > 0) || (this.xvel > -0.1 && this.xvel < 0)){
        this.xvel = 0;
    }
    if((this.yvel < 0.1 && this.yvel > 0) || (this.yvel > -0.1 && this.yvel < 0)){
        this.yvel = 0;
    }
};
var player = new Player();

// Rocks
var Rock = function(){
    this.timer = 0;
    this.trans = 255;
    this.fade = false;
    
    this.centerX = random(100, 500);
    this.centerY = random(100, 400);
    this.angle = random(360);
    this.out = 500;
    
    this.x = 400;
    this.y = 200;
    this.sz = 30;
    
    this.speed = random(3, 6);
};
Rock.prototype.draw = function() {
    this.x = this.centerX + (sin(this.angle) * this.out);
    this.y = this.centerY + (cos(this.angle) * this.out);
    
    noStroke();
    fill(173, 173, 173, this.trans);
    strokeWeight(2);
    ellipse(this.x + 2, this.y + 2, this.sz / 1.1, this.sz / 1.1);  
    noFill();
    stroke(0, 0, 0, this.trans);
    strokeWeight(1);
    ellipse(this.x, this.y, this.sz, this.sz);
    
    if(this.switchDir){
        this.out += this.speed;
    } else {
        this.out -= this.speed;
    }
    
    if(this.fade){
        this.trans /= 1.1;
    }
};
var Rocks = [];

// Rockets (more like missiles but I called them rockets because it's so close to Rocks)
var Rocket = function(){
    this.speed = 3;
    
    this.x = random(0, 600);
    this.y = random(-100, 50);
    this.sz = 30;
    
    this.timer = 0;
    this.trans = 255;
    this.fade = false;
};
Rocket.prototype.draw = function() {
    this.d = Math.sqrt((player.x - this.x) * (player.x - this.x) + (player.y - this.y) * (player.y - this.y));
    pushStyle();
    rectMode(CENTER);
    pushMatrix();
    translate(this.x, this.y);
    rotate(90 + atan2(this.y - player.y, this.x - player.x));
    noStroke();
    fill(224, 32, 32, this.trans);
    rect(3, -2, 10, 20);
    triangle(-4, 7, 11, 7, 3, 17);
    strokeWeight(1);
    noFill();
    stroke(0, 0, 0, this.trans);
    rect(0, -5, 10, 20);
    triangle(-7, 5, 8, 5, 0, 15);
    popMatrix();
    popStyle();
    
    this.x += (player.x - this.x) / this.d * this.speed;
    this.y += (player.y - this.y) / this.d * this.speed;
    
    this.timer += 0.1;
    
    if(this.timer > 30){
        this.fade = true;
    }
    for(var i in Rocks){
        if(circleCollide(this, Rocks[i])){
            this.fade = true;
            Rocks[i].fade = true;
        }
    }
    
    if(this.fade){
        this.trans /= 1.1;
    }
};
var Rockets = [];

// Coins
var Coin = function(){
    this.x = random(100, 500);
    this.y = random(100, 400);
    this.sz = 20;
    
    this.speed = 5;
};
Coin.prototype.draw = function() {
    this.d = Math.sqrt((player.x - this.x) * (player.x - this.x) + (player.y - this.y) * (player.y - this.y));
    
    noStroke();
    fill(222, 222, 113);
    strokeWeight(2);
    ellipse(this.x + 2, this.y + 2, this.sz / 1.1, this.sz / 1.1);  
    noFill();
    stroke(0, 0, 0);
    strokeWeight(1);
    ellipse(this.x, this.y, this.sz, this.sz);
    
    fill(0, 0, 0, 100);
    textFont(fonts.coin, 10);
    text('C', this.x, this.y);
    
    if(magnet && dist(this.x, this.y, player.x, player.y) < 150){
        this.x += (player.x - this.x) / this.d * this.speed;
        this.y += (player.y - this.y) / this.d * this.speed;
    }
};
var Coins = [];

// Bombs
var Bomb = function(x, y){
    this.x = x;
    this.y = y;
    this.sz = 30;
    this.time = 5.99;
    this.explode = false;
    
    this.Particle = function(x, y){
        this.x = x; this.x2 = 0;
        this.y = y;
        this.rot = random(360);
        this.sz = random(30);
        this.trans = random(255);
    };
    this.Particles = [];
    this.Particle.prototype.draw = function() {
        noStroke();
        fill(0, 0, 0, this.trans);
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.rot);
        ellipse(this.x2, 0, this.sz, this.sz);
        popMatrix();
        
        this.x2 += this.sz / 10;
        this.trans -= 5;
    };
    
    for(var i = 0; i < 100; i ++){
        this.Particles.push(new this.Particle(this.x, this.y));
    }
};
Bomb.prototype.draw = function() {
    if(this.explode){
        fill(0, 0, 0, 30);
        //ellipse(this.x, this.y, this.sz, this.sz);
        
        for(var i = this.Particles.length - 1; i >= 0; i --){
            this.Particles[i].draw();
            if(this.Particles[i].trans < 0){
                this.Particles.splice(i, 1);
            }
        }
    } else {
        // Bomb
        strokeWeight(1);
        pushMatrix();
        translate(this.x, this.y);
        noStroke();
        fill(59, 59, 59);
        ellipse(this.sz / 20, 7, this.sz, this.sz);
        rect(-this.sz / 6.9, -this.sz / 2.5, this.sz / 2.5, this.sz / 7.14);
        noFill();
        stroke(10, 10, 10);
        ellipse(0, 5, this.sz, this.sz);
        rect(-this.sz / 4.6, -this.sz / 2.1, this.sz / 2.5, this.sz / 7.14);
        arc(-this.sz / 2.1, -this.sz / 2.1, this.sz, this.sz, -26, 0);
        stroke(255);
        arc(2, this.sz / 4, this.sz / 1.25, this.sz / 1.25, -180, -120);
        arc(2, this.sz / 4, this.sz / 1.25, this.sz / 1.25, -115, -103);
        popMatrix();
        fill(255);
        textFont(fonts.small, 20);
        text(this.time.toFixed(0), this.x + 1, this.y + 5);
    }
    
    this.time -= 0.05;
    
    if(this.time < 0){
        this.explode = true;
    }
    
    for(var i in Rocks){
        if(circleCollide(this, Rocks[i]) && this.explode){
            Rocks[i].fade = true;
        }
    }
    
    if(this.explode){
        this.sz += 3;
    }
};
var Bombs = [new Bomb(300, 300)];

// Power ups
var Power = function(x, y, type){
    this.x = x;
    this.y = y;
    this.type = type;
    
    this.activated = false;
    this.arc = 360;
};
Power.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    noFill();
    if(dist(mouseX, mouseY, this.x, this.y) < 50){
        fill(0, 0, 0, 10);
        if(clicked){
            this.activated = true;
        }
    }
    stroke(156, 156, 156);
    strokeWeight(1);
    ellipse(0, 0, 100, 100);
    
    switch(this.type){
        case 'Forcefield':
            noStroke();
            fill(222, 248, 255);
            ellipse(-5, 6, 70, 70);
            noFill();
            stroke(117);
            ellipse(0, 0, 70, 70);
            arc(0, 0, 55, 55, -80, 0);
            arc(0, 0, 55, 55, -96, -89);
        break;
        case 'Magnet':
            strokeCap(SQUARE);
            noFill();
            strokeWeight(15);
            stroke(240, 153, 153);
            arc(3, 2, 30, 30, -180, 0);
            line(-12, 2, -11, 16);
            line(18, 2, 17, 16);
            strokeWeight(1);
            stroke(117);
            arc(0, 0, 50, 50, -180, 0);
            arc(0, 0, 10, 10, -180, 0);
            line(-5, 0, -5, 30);
            line(-25, 0, -20, 30);
            line(25, 0, 20, 30);
            line(5, 0, 5, 30);
            line(-5, 30, -20, 30);
            line(5, 30, 20, 30);
            line(-5, 20, -20, 20);
            line(5, 20, 20, 20);
            strokeWeight(1);
        break;
        case 'Speed':
            pushMatrix();
            translate(-5, 0);
            pushMatrix();
            translate(4, -3);
            noStroke();
            fill(224, 237, 107);
            beginShape();
            vertex(8, 0);
            vertex(15, 0);
            vertex(2, 30);
            vertex(2, 0);
            vertex(-6, 0);
            vertex(8, -30);
            endShape(CLOSE);
            popMatrix();
            noFill();
            stroke(117);
            beginShape();
            vertex(8, 0);
            vertex(15, 0);
            vertex(2, 30);
            vertex(2, 0);
            vertex(-6, 0);
            vertex(8, -30);
            endShape(CLOSE);
            popMatrix();
        break;
        case 'Health':
            pushMatrix();
            translate(0, 0);
            pushMatrix();
            translate(-3, -2);
            noStroke();
            fill(237, 116, 116);
            beginShape();
            vertex(10, -10);
            vertex(30, -10);
            vertex(30, 10);
            vertex(10, 10);
            vertex(10, 30);
            vertex(-10, 30);
            vertex(-10, 10);
            vertex(-30, 10);
            vertex(-30, -10);
            vertex(-10, -10);
            vertex(-10, -30);
            vertex(10, -30);
            endShape(CLOSE);
            popMatrix();
            noFill();
            stroke(117);
            beginShape();
            vertex(10, -10);
            vertex(30, -10);
            vertex(30, 10);
            vertex(10, 10);
            vertex(10, 30);
            vertex(-10, 30);
            vertex(-10, 10);
            vertex(-30, 10);
            vertex(-30, -10);
            vertex(-10, -10);
            vertex(-10, -30);
            vertex(10, -30);
            endShape(CLOSE);
            popMatrix();
        break;
        case 'Bomb':
            noStroke();
            fill(168, 168, 168);
            ellipse(5, 8, 50, 50);
            rect(-7, -24, 20, 7);
            noFill();
            stroke(117, 117, 117);
            ellipse(0, 5, 50, 50);
            rect(-10, -27, 20, 7);
            arc(-25, -27, 50, 50, -26, 0);
            arc(0, 5, 40, 40, -180, -120);
            arc(0, 5, 40, 40, -115, -103);
        break;
        case 'Cloak':
            strokeWeight(1);
            noFill();
            stroke(173, 173, 173);
            bezier(0, -30, -35, -20, -10, 10, -30, 20);
            bezier(0, -30, 35, -20, 10, 10, 30, 20);
            arc(-25, 20, 10, 10, 0, 180);
            arc(-12, 20, 15, 15, 0, 180);
            arc(6, 20, 20, 20, 0, 180);
            arc(22, 20, 12, 12, 0, 180);
        break;
    }
    if(this.activated){
        noStroke();
        fill(0, 0, 0, 30);
        arc(0, 0, 100, 100, 0, this.arc);
    }
    popMatrix();
    
    if(this.activated){
        switch(this.type){
            case 'Forcefield':
                forcefield = (this.arc < 1 ? false : true);
            break;
            case 'Magnet':
                magnet = (this.arc < 1 ? false : true);
            break;
            case 'Speed':
                speed = (this.arc < 1 ? false : true);
            break;
            case 'Health':
               if(this.arc > 1){
                   player.health = player.sz;
                   this.arc -= 5;
               }
            break;
        }
        this.arc --;
        if(this.arc < 0){
            this.arc = 360;
            this.activated = false;
        }
    }
};
var Powers = [new Power(50, 505, 'Magnet'), new Power(150, 520, 'Forcefield'), new Power(250, 535, 'Health'), new Power(350, 535, 'Speed'), new Power(450, 520, 'Cloak'), new Power(550, 505, 'Bomb')];

// Reset game values
var resetGameValues = function(){
    // Reset stuff
    if(Coins.length > 0 && Rocks.length > 0 && Rockets.length > 0){
        Coins = [];
        Rocks = [];
        Rockets = [];
        player = new Player();
    }
};

// The draw function
draw = function() {
    background(255);
    
    for(var i in images){
        if(typeof images[i] !== 'object'){
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    if(scene === 'Menu'){
        resetGameValues();
        
        image(images.homeBG, 0, 0);
        
        textFont(fonts.titles, 40);
        fill(0);
        text('S   K   E   T   C   H   Y', 300, 280);
        
        buttons.play.draw();
        buttons.shop.draw();
        buttons.how.draw();
    }
    if(scene === 'Game'){
        if(frameCount % 30 === 0){
            timer ++;
        }
        if(frameCount % 30 === 0 && timer > 2){
            Rocks.push(new Rock());
        }
        if(frameCount % 100 === 0 && timer > 10){
            Rockets.push(new Rocket());
        }
        if(frameCount % 90 === 0){
            Coins.push(new Coin());
        }
        
        background(255);
        
        noFill();
        stroke(0, 0, 0, 50);
        strokeWeight(2);
        rect(50, 50, 500, 400);
        
        for(var i = Rocks.length - 1; i >= 0; i --){
            Rocks[i].draw();
            if(circleCollide(Rocks[i], player)){
                if(forcefield){
                    Rocks[i].fade = true;
                    Rocks[i].switchDir = true;
                } else {
                    player.health --;
                }
            }
            if(((Rocks[i].x < 0 || Rocks[i].x > 600 || Rocks[i].y < 0 || Rocks[i].y > 600) && Rocks[i].out < 0) || Rocks[i].trans < 0.1){
                Rocks.splice(i, 1);
                i--;
            }
        }
        
        for(var i = Rockets.length - 1; i >= 0; i --){
            Rockets[i].draw();
            if(circleCollide(Rockets[i], player)){
                if(forcefield){
                    Rockets[i].fade = true;
                } else {
                    this.health --;
                }
            }
            if(Rockets[i].x < 0 || Rockets[i].x > 600 || Rockets[i].y < 0 || Rockets[i].y > 600 || Rockets[i].trans < 5){
                Rockets.splice(i, 1);
                i--;
            }
        }
        
        for(var i = Coins.length - 1; i >= 0; i --){
            Coins[i].draw();
            if(circleCollide(player, Coins[i])){
                coins ++;
                Coins.splice(i, 1);
            }
        }
        
        for(var i = Bombs.length - 1; i >= 0; i --){
            Bombs[i].draw();
            if(Bombs[i].sz > 150){
                Bombs.splice(i, 1);
            }
        }
        
        player.draw();
        
        noStroke();
        fill(255, 255, 255);
        rect(0, 0, 49, height);
        rect(551, 0, 49, height);
        rect(0, 0, width, 49);
        rect(0, 451, width, 150);
        
        noStroke();
        fill(222, 222, 113);
        strokeWeight(2);
        ellipse(562, 572, 23, 23);  
        noFill();
        stroke(0, 0, 0);
        strokeWeight(1);
        ellipse(560,  570, 25, 25);
        
        fill(0, 0, 0, 100);
        textFont(fonts.coin, 10);
        text('C', 560, 570);
        
        pushStyle();
        textAlign(RIGHT, CENTER);
        textFont(fonts.small, 20);
        text(coins, 540, 570);
        popStyle();
        
        for(var i = Powers.length - 1; i >= 0; i --){
            Powers[i].draw();
        }
        
        if(player.health < 0){
            scene = 'Menu';
        }
    }
    if(scene === 'Shop'){
        stroke(0);
        for(var i = 0; i < 600; i += 15){
            line(i, 520, i, 530);
        }
        
        noStroke();
        fill(222, 222, 113);
        strokeWeight(2);
        ellipse(562, 572, 23, 23);  
        noFill();
        stroke(0, 0, 0);
        strokeWeight(1);
        ellipse(560,  570, 25, 25);
        
        fill(0, 0, 0, 100);
        textFont(fonts.coin, 10);
        text('C', 560, 570);
        
        pushStyle();
        textAlign(RIGHT, CENTER);
        textFont(fonts.small, 20);
        text(coins, 540, 570);
        popStyle();
        
        // Magnet
        strokeCap(SQUARE);
        pushMatrix();
        translate(420, 245);
        noFill();
        strokeWeight(15);
        stroke(240, 153, 153);
        arc(3, 2, 30, 30, -180, 0);
        line(-12, 2, -11, 16);
        line(18, 2, 17, 16);
        strokeWeight(1);
        stroke(117);
        arc(0, 0, 50, 50, -180, 0);
        arc(0, 0, 10, 10, -180, 0);
        line(-5, 0, -5, 30);
        line(-25, 0, -20, 30);
        line(25, 0, 20, 30);
        line(5, 0, 5, 30);
        line(-5, 30, -20, 30);
        line(5, 30, 20, 30);
        line(-5, 20, -20, 20);
        line(5, 20, 20, 20);
        popMatrix();
        
        strokeWeight(1);
        
        // Speed
        pushMatrix();
        translate(175, 100);
        pushMatrix();
        translate(4, -3);
        noStroke();
        fill(224, 237, 107);
        beginShape();
        vertex(8, 0);
        vertex(15, 0);
        vertex(2, 30);
        vertex(2, 0);
        vertex(-6, 0);
        vertex(8, -30);
        endShape(CLOSE);
        popMatrix();
        noFill();
        stroke(117);
        beginShape();
        vertex(8, 0);
        vertex(15, 0);
        vertex(2, 30);
        vertex(2, 0);
        vertex(-6, 0);
        vertex(8, -30);
        endShape(CLOSE);
        popMatrix();
        
        // Health
        pushMatrix();
        translate(300, 100);
        pushMatrix();
        translate(-3, -2);
        noStroke();
        fill(237, 116, 116);
        beginShape();
        vertex(10, -10);
        vertex(30, -10);
        vertex(30, 10);
        vertex(10, 10);
        vertex(10, 30);
        vertex(-10, 30);
        vertex(-10, 10);
        vertex(-30, 10);
        vertex(-30, -10);
        vertex(-10, -10);
        vertex(-10, -30);
        vertex(10, -30);
        endShape(CLOSE);
        popMatrix();
        noFill();
        stroke(117);
        beginShape();
        vertex(10, -10);
        vertex(30, -10);
        vertex(30, 10);
        vertex(10, 10);
        vertex(10, 30);
        vertex(-10, 30);
        vertex(-10, 10);
        vertex(-30, 10);
        vertex(-30, -10);
        vertex(-10, -10);
        vertex(-10, -30);
        vertex(10, -30);
        endShape(CLOSE);
        popMatrix();
        
        // Forcefield
        pushMatrix();
        translate(420, 100);
        noStroke();
        fill(222, 248, 255);
        ellipse(-5, 6, 70, 70);
        noFill();
        stroke(117);
        ellipse(0, 0, 70, 70);
        arc(0, 0, 55, 55, -80, 0);
        arc(0, 0, 55, 55, -96, -89);
        popMatrix();
        
        // Bomb
        pushMatrix();
        translate(180, 250);
        noStroke();
        fill(189, 189, 189);
        ellipse(5, 8, 50, 50);
        rect(-7, -24, 20, 7);
        noFill();
        stroke(117, 117, 117);
        ellipse(0, 5, 50, 50);
        rect(-10, -27, 20, 7);
        arc(-25, -27, 50, 50, -26, 0);
        arc(0, 5, 40, 40, -180, -120);
        arc(0, 5, 40, 40, -115, -103);
        popMatrix();
        
        // Cloak
        pushMatrix();
        translate(300, 250);
        noFill();
        stroke(173, 173, 173);
        bezier(0, -30, -35, -20, -10, 10, -30, 20);
        bezier(0, -30, 35, -20, 10, 10, 30, 20);
        arc(-25, 20, 10, 10, 0, 180);
        arc(-12, 20, 15, 15, 0, 180);
        arc(6, 20, 20, 20, 0, 180);
        arc(22, 20, 12, 12, 0, 180);
        popMatrix();
        
        for(var i = 0; i < shop.length; ++i){
            shop[i].x = 180 + ((i * 120) % 360);
            
            pushMatrix();
            translate(shop[i].x, shop[i].y);
            noFill();
            if(dist(mouseX, mouseY, shop[i].x, shop[i].y) < 50){
                fill(0, 0, 0, 20);
                if(clicked){
                    if(coins >= shop[i].price){
                        coins -= shop[i].price;
                    } else {
                        Alerts.push(new Alert('Too Pricey', 'Uh-oh! You don\'t have enough money to buy this item!'));
                    }
                }
            }
            stroke(156, 156, 156);
            strokeWeight(1);
            ellipse(0, 0, 100, 100);
            
            fill(156);
            textFont(fonts.small, 17);
            text(shop[i].name, 0, 60);
            textSize(18);
            text('$' + shop[i].price, 0, 80);
            popMatrix();
            
            if(dist(mouseX, mouseY, shop[i].x, shop[i].y) < 50){
                fill(184, 184, 184);
                textFont(fonts.small, 20);
                text(shop[i].info, 50, 200, 500, 500);
            }
        }
        
        
        
        fill(0);
        buttons.back.draw();
    }
    if(scene === 'How'){
        strokeWeight(1);
        noFill();
        stroke(0);
        rect(100, 100, 400, 400);
        strokeWeight(3);
        stroke(255);
        rect(200, 100, 200, 10);
        
        fill(0);
        textFont(fonts.titles, 50);
        text('HOW', 300, 100);
        
        textFont(fonts.small, 20);
        text('Dodge ROCKS and MISSILES\n\nCollect COINS\n\nBUY powers in the shop\n\nUSE your POWERS in the game\n\nGet POINTS for staying alive\n\nGet BONUS POINTS for running a\nmissile into a rock', 300, 300);
        
        fill(0);
        buttons.back.draw();
    }
    
    for(var i = 0; i < Alerts.length; ++i){
        Alerts[i].draw();
        if(Alerts[i].s > 1){
            Alerts.splice(i, 1);
        }
    }
    
    cursor(overButton ? 'pointer' : 'default');
    
    overButton = false;
    clicked = false;
};
