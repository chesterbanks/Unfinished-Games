/** Life of a Square
 * Chester Banks
 * February 3 2016
 * 
 * An entry to the "Minimalistic Design Contest".
 * 
 * This is my first three-stage game. I always thought they were cool, so I tried making one myself! I hope you liked it!
 * 
 * Thanks to my subscribers! Subscribe here: _____
 * This program's lucky subscriber is __________! If you want to see his _____ and other cool programs, go here: khanacademy.org/profile/_______!
*/

rectMode(CENTER);
textAlign(CENTER, CENTER);
textFont(createFont("Trebuchet MS"));

var keys = [];
var keyPressed = function(){keys[keyCode] = true;};
var keyReleased = function(){keys[keyCode] = false;};

var player = {
    x: 200,
    y: 200,
    sz: 15
};

var textureRects = [];
for(var i = 5; i < width; i += 20){
    for(var j = -20; j < height+20; j += 20){
        textureRects.push({x: i, y: j, br: random(0, 10)});
    }
}

background(255, 255, 255);
/*noStroke();
for(var i in textureRects){
    fill(0, 0, 0, textureRects[i].br);
    rect(textureRects[i].x, textureRects[i].y, 20, 20, -15);
}*/
var bg1 = get(0, 0, 400, 400);

background(25, 191, 64);
noStroke();
for(var i in textureRects){
    fill(0, 0, 0, textureRects[i].br*2);
    rect(textureRects[i].x, textureRects[i].y, 18, 18,
    20, 20, 20, 0);
}
var bg2 = get(0, 0, 400, 400);

var scene = "Menu";
var scores = [0, 0, 0, 0];

var shadowTxt = function(txt, x, y, colo){
    fill(0, 0, 0, 30);
    text(txt, x, y+5);
    fill(colo);
    text(txt, x, y);
};
var button = function(x, y, sz, txt, next){
    strokeWeight(1);
    stroke(222, 222, 222);
    fill(222, 222, 222);
    ellipse(x, y, sz, sz);
    if(dist(mouseX, mouseY, x, y) < sz/2){
        fill(255);
        ellipse(x, y, sz, sz);
        fill(25, 191, 64);
        if(txt === "."){
            noFill();
            strokeCap(SQUARE);
            stroke(25, 191, 64);
            strokeWeight(3);
            ellipse(x-5, y-3, 18, 18);
            line(x+3, y+6, x+11, y+14);
        } else { 
            text(txt, x, y);
        }
        if(mouseIsPressed){
            scene = next;
        }
    } else {
        fill(255, 255, 255);
        ellipse(x, y - 6, sz, sz);
        fill(25, 191, 64);
        if(txt === "."){
            noFill();
            strokeCap(SQUARE);
            stroke(25, 191, 64);
            strokeWeight(3);
            ellipse(x-5, y-9, 18, 18);
            line(x+3, y, x+11, y+8);
        } else { 
            text(txt, x, y-6);
        }
    }
};

var howPage = function(title, txt, next){
    image(bg1, 0, 0);
    textSize(35);
    shadowTxt(title, 200, 50, color(25, 191, 64));
    textSize(18);
    shadowTxt(txt, 200, 200, color(25, 191, 64));
    textSize(20);
    button(350, 365, 50, "\u25B6", next);
};

var rectCollide = function(one, two){
    if( one.x+one.sz > two.x &&
        one.y+one.sz > two.y &&
        one.x < two.x+two.sz &&
        one.y < two.y+two.sz){
        return true;
    }
};

/** Stage One Enemies */
var enemy1 = function(x, y, sz){
    this.x = x;
    this.y = y;
    this.sz = sz;
};
var enemies1 = [
    new enemy1(30, 30, 10), 
    new enemy1(370, 30, 10), 
    new enemy1(370, 370, 10), 
    new enemy1(30, 370, 10), 
    new enemy1(200, 250, 10),
    new enemy1(150, 200, 10),
    new enemy1(250, 200, 10),
    new enemy1(200, 250, 10),
    new enemy1(150, 200, 10),
    new enemy1(250, 200, 10),
    new enemy1(30, 30, 25), 
    new enemy1(370, 30, 30), 
    new enemy1(370, 370, 35), 
    new enemy1(200, 30, 40), 
    new enemy1(200, 370, 45), 
    new enemy1(30, 200, 50), 
    new enemy1(370, 200, 55), 
];
enemy1.prototype.draw = function() {
    rectMode(LEFT);
    if(this.sz > player.sz && dist(this.x, this.y, player.x, player.y) < 150){
        fill(209, 50, 50);
        this.x = (player.x-this.x)/35 + this.x;
        this.y = (player.y-this.y)/35 + this.y;
        if(rectCollide(this, player)){
            scene = "How2";
        }
    } else {
        fill(40, 141, 219);
    }
    rect(this.x, this.y, this.sz, this.sz);
    rectMode(CENTER);
};

/** Stage Two Enemies */
var enemy2 = function(x, y, type){
    this.x = x;
    this.y = y;
    this.sz = 20;
    this.type = type;
};
var enemies2 = [];
enemy2.prototype.draw = function() {
    noStroke();
    if(this.type === 0){ // Enemy blocks
        fill(232, 23, 23);
        rect(this.x, this.y, this.sz, this.sz);
    } else { // Good blocks
        fill(27, 165, 224);
        rect(this.x, this.y, this.sz, this.sz);
        if(this.y > 415){
            scene = "How3";
        }
    }
    
    this.y += 3;
};

/** Stage Three Falling Words */
var goodWords = ["Rectangle", "Corners", "Blue", "Square", "Aqua", "Cobalt", "Cyan", "Indigo"];
var enemyWords = ["Radius", "Circumference", "Round", "Pi", "Red", "Crimson", "Winston", "Circle", "Diameter", "Scarlet"];

var word = function(whichWord, good){
    this.x = random(50, 350);
    this.y = random(-10, -50);
    this.whichWord = whichWord;
    this.good = good;
};
var words = [];
word.prototype.draw = function() {
    fill(255, 255, 255);
    textSize(18);
    text(this.whichWord, this.x, this.y);
    
    this.y += 2;
};

var typedWord = "";

var keyTyped = function(){
    typedWord += key.toString();
    if(key.toString() === "z" || key.toString() === "Z"){
        typedWord = "";
    }
};

draw = function() {
    if(scene === "Menu"){
        image(bg1, 0, 0);
        textSize(35);
        shadowTxt("life of a square", 200, 200, color(25, 191, 64));
        textSize(15);
        shadowTxt("t h e   t h r e e   s t a g e   g a m e   o f", 200, 170, color(25, 191, 64));
        shadowTxt("c r e a t e d   b y   c h e s t e r   b a n k s", 200, 230, color(25, 191, 64));
        textSize(30);
        button(200, 320, 80, "\u25B6", "How1");
    }
    
    if(scene === "How1"){
        howPage("Stage One", "1. Use the arrow keys to move\n\n2. Avoid bigger squares\n\n3. Eat smaller squares\n\n4. The more you eat, the bigger you get", "Stage One");
    }
    if(scene === "Stage One"){
        rectMode(LEFT);
        image(bg2, 0, 0);
        noStroke();
        fill(212, 212, 212);
        rect(player.x, player.y+3, player.sz, player.sz);
        fill(255, 255, 255);
        rect(player.x, player.y, player.sz, player.sz);
        rectMode(CENTER);
        
        for(var i in enemies1){
            enemies1[i].draw();
            if(enemies1[i].sz <= player.sz && rectCollide(enemies1[i], player)){
                player.sz += 5;
                scores[0] ++;
                enemies1.splice(i, 1);
            }
        }
        
        if(enemies1.length === 0){
            scene = "How2";
        }
        
        if(keys[UP] && player.y > 0){player.y-=3;}
        if(keys[DOWN] && player.y+player.sz < 400){player.y+=3;}
        if(keys[LEFT] && player.x > 0){player.x-=3;}
        if(keys[RIGHT] && player.x+player.sz < 400){player.x+=3;}
        
        fill(255);
        textSize(11);
        text("enemies1.length: " + enemies1.length, 50, 10);
    }
    if(scene === "How2"){
        howPage("Stage Two", "1. Arrow keys to move\n\n2. Touch the blue squares\n\n3. Avoid the red squares\n\n4. Don't let any blue squares get by", "Stage Two");
        player.x = 200;
        player.y = 200;
        player.sz = 15;
    }
    if(scene === "Stage Two"){
        image(bg2, 0, 0);
        noStroke();
        fill(212, 212, 212);
        rect(player.x, player.y+3, player.sz, player.sz);
        fill(255, 255, 255);
        rect(player.x, player.y, player.sz, player.sz);
        
        if(keys[UP] && player.y > 0){player.y-=5;}
        if(keys[DOWN] && player.y+player.sz < 400){player.y+=5;}
        if(keys[LEFT] && player.x > 0){player.x-=5;}
        if(keys[RIGHT] && player.x+player.sz < 400){player.x+=5;}
        
        if(frameCount % 30 === 15){
            enemies2.push(new enemy2(random(10, 390), random(-10, -50), round(random(0, 1))));
        }
        for(var i in enemies2){
            enemies2[i].draw();
            if(rectCollide(enemies2[i], player)){
                if(enemies2[i].type === 0){
                    scene = "How3";
                } else {
                    scores[1] += 2;
                    enemies2.splice(i, 1);
                }
            }
        }
    }
    if(scene === "How3"){
        howPage("Stage Three", "1. Type the falling words that\nhave to do with squares and blue\n\n2. Don't type falling words that\nhave to do with circles and red\n\n3. Don't let any square/blue words\nget to the bottom\n\n4. Z to clear", "Stage Three");
    }
    if(scene === "Stage Three"){
        background(0, 0, 0);
        fill(240, 240, 240);
        textSize(30);
        text(typedWord, 200, 370);
        
        if(frameCount % 200 === 25){
            words.push(new word(goodWords[round(random(0, goodWords.length-1))], true));
        }
        if(frameCount % 200 === 90 || frameCount % 200 === 10){
            words.push(new word(enemyWords[round(random(0, enemyWords.length-1))], false));
        }
        for(var i in words){
            words[i].draw();
            if(typedWord.toLowerCase() === words[i].whichWord.toLowerCase()){
                typedWord = "";
                if(!words[i].good){
                    scene = "Final";
                } else {
                    scores[2] ++;
                }
                words.splice(i, 1);
            }
            if(words[i].good && words[i].y > 410){
                scene = "Final";
            }
        }
    }
    if(scene === "Final"){
        image(bg1, 0, 0);
        textSize(15);
        shadowTxt("Y O U R   F I N A L   S C O R E   W A S :", 200, 100, color(25, 194, 64));
        shadowTxt("C L I C K   T O   P L A Y   A G A I N", 200, 300, color(25, 194, 64));
        textSize(160);
        shadowTxt(scores[3], 200, 200, color(25, 194, 64));
        
        if(scores[3] <= (scores[0] + scores[1] + scores[2])){
            scores[3] ++;
        }
    }
};

var mouseClicked = function(){
    if(scene === "Final"){
        scores[0] = 0; scores[1] = 0; scores[2] = 0; scores[3] = 0;
        player.x = 200; player.y = 200; player.sz = 200;
        typedWord = "";
        words = []; enemies2 = []; enemies1 = [];
        
        scene = "Menu";
    }
};
