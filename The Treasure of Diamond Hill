// Settings
{
    textAlign(CENTER, CENTER);
    
    var myFont = 'Oswald';
    var loadGoogleFont = (function () {
        return this.Function ( "gflink", "callback", "isloaded", "var gfs = document.querySelectorAll('link[href=\"'+gflink+'\"]');if(!gfs.length){var f=document.createElement('link');f.setAttribute('rel','stylesheet');f.setAttribute('type','text/css');f.onload=callback;f.setAttribute('href',gflink);document.head.appendChild(f);}else if(isloaded){isloaded();}");
    })();
    
    var fontloaded = false;
    var callback = function () {
        textFont(createFont(myFont), 30);
        fontloaded = true;
    };
}

// System objects
{
    var mouse = {
        clicked: false,
        overButton: false,
    };
    var system = {
        scene: 'Menu',
        keys: [],
        nextScene: 'Map',
        switchingScenes: false,
        blackness: 0,
        blackSpeed: 0,
        
        workingOn: false,
        rectCollide: function(a, b) {
            return a.position.x+a.width > b.position.x && a.position.y+a.height > b.position.y && a.position.x < b.position.x+b.width && a.position.y < b.position.y+b.height;
        }
    };
}

// Functions
{   
    var tree = function(x, y, sz, h){
        fill(136, 255, 0);
        ellipse(x, y, sz, sz);
        fill(0, 0, 0, 30);
        arc(x, y, sz, sz, -90, 90);
        fill(163, 98, 29);
        rect(x, y + (h - 5), 5, h);
    };
    var cloud = function(x, y, sz){
        noStroke();
        pushMatrix();
        translate(x, y);
        scale(sz/10);
        fill(245);
        rect(0, 0, 100, 20, 30);
        ellipse(-25, -13, 30, 23);
        ellipse(25, -13, 40, 33);
        ellipse(0, -19, 50, 50);
        fill(230);
        (rect)(-25, 0, 50, 20, 30, 0, 0, 30);
        arc(0, -19, 50, 50, -270, -90);
        ellipse(-25, -13, 30, 23);
        popMatrix();
    };
    
    var button = function(x, y, sz, txt, next){
        this.x = x; 
        this.y = y;
        this.sz = sz; 
        this.txt = txt;
        this.next = next;
    };
    button.prototype.draw = function() {
        noStroke();
        fill(0, 0, 0, 50);
        ellipse(this.x, this.y + 12, this.sz, this.sz);
        textSize(this.sz/6);
        strokeWeight(10);
        stroke(255, 255, 255);
        fill(255, 255, 255, 220);
        if(dist(mouseX, mouseY, this.x, this.y) < this.sz/2){
            mouse.overButton = true;
            fill(255, 255, 255, 220);
            ellipse(this.x, this.y, this.sz + sin(frameCount*10)*10, this.sz + cos(frameCount*10)*10);
            fill(50);
            text(this.txt.toUpperCase(), this.x, this.y);
            if(mouse.clicked){
                system.nextScene = this.next;
                system.switchingScenes = true;
            }
        } else {
            ellipse(this.x, this.y, this.sz, this.sz);
            fill(50);
            text(this.txt.toUpperCase(), this.x, this.y);
        }
    };
}

// Images
{
    var images = {
        'flatCity': function(){
            rectMode(CENTER);
            noStroke();
            
            // Background
            fill(55, 179, 154);
            rect(300, 300, width, height);
            
            // Sun
            fill(240, 230, 39);
            ellipse(100, 100, 50, 50);
            for(var i = 0; i < 360; i += 30){
                ellipse(100 + sin(i)*35, 100 + cos(i)*35, 7, 7);
            }
            fill(0, 0, 0, 20);
            arc(100, 100, 50, 50, -90, 90);
            
            // Clouds
            cloud(495, 138, 4);
            cloud(495, 359, 6);
            cloud(292, 156, 13);
            cloud(135, 205, 8);
            cloud(157, 345, 5);
            
            // Ferris wheel
            noFill();
            stroke(85);
            strokeWeight(4);
            ellipse(135, 430, 120, 120);
            ellipse(135, 430, 105, 105);
            for(var i = -22; i < 360; i += 22){
                strokeWeight(2);
                line(135 + sin(i)*50, 430 + cos(i)*50, 135, 430);
            }
            noStroke();
            fill(85);
            for(var i = -22; i < 360; i += 22){
                ellipse(135 + sin(i)*65, 430 + cos(i)*65, 10, 10);
            }
            
            // Road, sidewalk & grass
            fill(53, 217, 28);
            rect(300, 560, 530, 50);
            fill(115, 115, 115);
            rect(300, 550, 550, 50);
            fill(92, 92, 92);
            rect(300, 550, 570, 30);
            fill(235);
            for(var i = 35; i < 580; i += 25){
                rect(i, 550, 15, 4, 20);
            }
            
            //  Back buildings
            fill(94);
            rect(270, 400, 100, 250);
            rect(380, 411, 80, 230);
            
            // Building #1
            fill(240, 195, 136);
            rect(95, 500, 60, 50);
            fill(0, 0, 0, 30);
            rect(95, 520, 60, 10);
            fill(128, 97, 61);
            rect(95, 465, 60, 20);
            fill(99, 85, 67);
            rect(95, 475, 66, 3, 5);
            rect(63, 465, 3, 23, 5);
            fill(235, 196, 146);
            rect(75, 457, 9, 16);
            fill(93, 122, 117);
            for(var i = 77; i < 110; i += 15){
                    rect(i, 499, 8, 15);
                    arc(i, 492, 8, 8, -180, 0);
            }
            
            // Building #3
            fill(179, 252, 250);
            rect(185, 475, 60, 100);
            fill(0, 230, 255);
            rect(185, 415, 60, 20);
            fill(0, 191, 201);
            rect(185, 426, 66, 3, 5);
            rect(153, 415, 3, 23, 5);
            fill(255, 255, 255);
            rect(165, 405, 7, 16);
            fill(176, 176, 176);
            for(var i = 165; i < 204; i += 15){
                for(var j = 447; j < 511; j += 29){
                    rect(i, j, 10, 15);
                    arc(i, j-7, 10, 10, -180, 0);
                }
            }
            
            // Building #2
            fill(225);
            rect(130, 495, 40, 60);
            fill(255);
            rect(160, 495, 20, 60);
            triangle(170, 465, 150, 465, 160, 445);
            fill(102, 75, 59);
            quad(150, 465, 160, 445, 120, 445, 110, 465);
            stroke(140, 110, 92);
            strokeWeight(3);
            line(150, 465, 160, 445);
            line(150, 465, 110, 465);
            line(110, 465, 120, 445);
            strokeWeight(5);
            point(160, 464);
            noStroke();
            fill(102, 128, 124);
            for(var i = 120; i < 145; i += 9){
                rect(i, 480, 6, 15);
                rect(i, 502, 6, 15);
            }
            fill(130, 130, 130);
            rect(131, 522, 45, 5);
            fill(171, 171, 171);
            rect(161, 522, 19, 5);
            fill(235);
            rect(125, 445, 3, 15, 5);
            rect(130, 445, 3, 15, 5);
            
            // Building #4
            fill(255, 255, 255);
            rect(230, 460, 60, 130);
            fill(30, 155, 186);
            rect(230, 520, 68, 10);
            rect(230, 385, 60, 20);
            fill(45, 117, 130);
            rect(230, 395, 66, 3, 5);
            rect(198, 385, 3, 23, 5);
            rect(260, 385, 3, 23, 5);
            fill(232, 232, 232);
            rect(245, 375, 3, 15, 5);
            rect(250, 375, 3, 15, 5);
            fill(163, 186, 182);
            for(var i = 210; i < 255; i += 13){
                for(var j = 417; j < 500; j += 25){
                    rect(i, j, 8, 15);
                    arc(i, j-7, 8, 8, -180, 0);
                }
            }
            
            // Building #9
            pushMatrix();
            translate(400, 0);
            fill(125, 184, 151);
            rect(130, 500, 40, 50);
            fill(138, 209, 169);
            rect(160, 500, 20, 50);
            triangle(170, 475, 150, 475, 160, 455);
            fill(102, 75, 59);
            quad(150, 475, 160, 455, 120, 455, 110, 475);
            stroke(140, 110, 92);
            strokeWeight(3);
            line(150, 475, 160, 455);
            line(150, 475, 110, 475);
            line(110, 475, 120, 455);
            strokeWeight(5);
            noStroke();
            fill(102, 128, 124);
            for(var i = 123; i < 145; i += 14){
                rect(i, 495, 8, 15);
                arc(i, 488, 8, 8, -180, 0);
            }
            popMatrix();
            
            // Building #8
            pushMatrix();
            translate(105, 0);
            fill(230, 230, 230);
            rect(380, 490, 60, 70);
            fill(235, 184, 82);
            rect(380, 507, 60, 35);
            fill(128, 97, 61);
            rect(380, 445, 60, 20);
            fill(89, 75, 58);
            rect(380, 455, 66, 4, 5);
            rect(350, 445, 4, 23, 5);
            rect(410, 445, 4, 23, 5);
            fill(235);
            rect(395, 435, 7, 20);
            fill(123, 135, 133);
            for(var i = 358; i < 406; i += 14){
                for(var j = 475; j < 514; j += 35){
                    rect(i, j, 8, 15);
                    arc(i, j-7, 8, 8, -180, 0);
                }
            }
            popMatrix();
            
            // Building #7
            pushMatrix();
            translate(295, 0);
            fill(80, 210, 217);
            rect(130, 495, 40, 60);
            fill(68, 190, 196);
            rect(160, 495, 20, 60);
            triangle(170, 465, 150, 465, 160, 445);
            fill(150, 150, 150);
            quad(150, 465, 160, 445, 120, 445, 110, 465);
            stroke(196, 196, 196);
            strokeWeight(3);
            line(150, 465, 160, 445);
            line(150, 465, 110, 465);
            line(110, 465, 120, 445);
            strokeWeight(5);
            noStroke();
            fill(102, 128, 124);
            for(var i = 123; i < 145; i += 14){
                rect(i, 480, 8, 15);
                rect(i, 502, 8, 15);
                arc(i, 474, 8, 8, -180, 0);
                arc(i, 495, 8, 8, -180, 0);
            }
            fill(185, 126, 126);
            rect(125, 445, 3, 15, 5);
            rect(130, 445, 3, 15, 5);
            popMatrix();
            
            // Building #6
            fill(255, 255, 255);
            rect(380, 475, 60, 100);
            fill(121, 178, 179);
            rect(380, 520, 61, 10);
            fill(201, 201, 201);
            rect(380, 415, 60, 20);
            fill(161, 161, 161);
            rect(380, 426, 66, 4, 5);
            rect(350, 415, 4, 23, 5);
            rect(410, 415, 4, 23, 5);
            rect(395, 405, 7, 16);
            fill(209, 209, 209);
            for(var i = 358; i < 406; i += 14){
                for(var j = 447; j < 510; j += 27){
                    rect(i, j, 8, 15);
                    arc(i, j-7, 8, 8, -180, 0);
                }
            }
            
            // Building #5
            fill(230, 227, 161);
            rect(320, 485, 60, 80);
            fill(138, 116, 88);
            rect(320, 445, 68, 10);
            rect(320, 520, 68, 10);
            rect(320, 475, 68, 5);
            fill(26, 143, 127);
            for(var i = 300; i < 351; i += 13){
                rect(i, 463, 8, 15);
                arc(i, 456, 8, 8, -180, 0);
                rect(i, 492, 8, 15);
                arc(i, 485, 8, 8, -180, 0);
            }
            rect(320, 510, 50, 7);
            fill(201, 212, 42);
            rect(320, 505, 50, 7);
            for(var i = 298; i < 345; i += 5){
                arc(i, 509, 5, 5, 0, 180);
            }
            
            // Trees
            tree(75, 490, 30, 27);
            tree(60, 501, 20, 19);
            tree(275, 503, 20, 18);
            tree(260, 490, 30, 27);
            tree(400, 503, 20, 18);
            tree(540, 495, 30, 23);
            tree(525, 503, 20, 18);
            
            // Bushes
            fill(107, 181, 22);
            arc(114, 525, 30, 30, -180, 0);
            arc(129, 525, 20, 20, -180, 0);
            arc(410, 525, 25, 25, -180, 0);
            arc(425, 525, 20, 20, -180, 0);
            arc(537, 525, 25, 25, -180, 0);
            arc(521, 525, 20, 20, -180, 0);
            rectMode(CORNER);
            
            return get(0, 0, width, height);
        },
    };
}

// Processing events
{
    keyPressed = function() {system.keys[keyCode] = true;};
    keyReleased = function() {system.keys[keyCode] = false;};
    mouseClicked = function(){mouse.clicked = true;};
}

// Scenes
{
    var menu = function(){
        this.buttons = [
            new button(300, 300, 130, 'Begin', 'Intro'),
            new button(150, 300, 110, 'How', 'How'),
            new button(450, 300, 110, 'Credits', 'Credits'),
        ];
    };
    menu.prototype.draw = function() {
        image(images.flatCity, 0, 0);
        
        noFill();
        stroke(255, 255, 255, 10);
        for(var i = 0; i < 60; i += 5){
            strokeWeight(i);
            rect(0, 0, width, height);
        }
        
        noStroke();
        fill(0);
        rect(105, 137, 392, 76);
        fill(255, 255, 255);
        rect(134, 113, 172, 28);
        
        textSize(25);
        fill(55, 179, 154);
        text("THE TREASURE OF", 220, 126);
        fill(255);
        textSize(70);
        text("DIAMOND HILL", 300, 175);
        
        for(var i in this.buttons){
            this.buttons[i].draw();
        }
    };
    var Menu = new menu();
    
    var credits = function(){
        this.buttons = [
            new button(80, 520, 120, 'Back', 'Menu'),
        ];
        
        this.creds = [
            {
                name: 'Eric Balingit',
                img: getImage("avatars/piceratops-ultimate"),
                cred: 'For the code to load google fonts'
            },
            {
                name: '17mloges',
                img: getImage("avatars/mr-pants"),
                cred: 'For the great storyline'
            },
        ];
    };
    credits.prototype.draw = function() {
        background(55, 179, 154);
        strokeWeight(5);
        for(var i = -300; i < 0; i += 5){
            for(var j = 0; j < 360; j += 90){
                stroke(255, 255, 255, -150 - i);
                pushMatrix();
                translate(300, 300);
                rotate(j);
                line(-300, i, 300, i);
                popMatrix();
            }
        }
        fill(0, 0, 0, 30);
        for(var i in this.creds){
            textSize(100);
            text(this.creds[i].name.toLowerCase(), 300, i*70 + 200);
        }
        fill(255);
        textSize(80);
        text("CREDITS", 300, 100);
        for(var i in this.creds){
            textSize(40);
            text(this.creds[i].name.toLowerCase(), 300, i*70 + 200);
            textSize(15);
            text(this.creds[i].cred.toLowerCase(), 300, i*70 + 225);
        }
        
        for(var i in this.buttons){
            this.buttons[i].draw();
        }
    };
    var Credits = new credits();
    
    var intro = function(){
        this.texts = [
            'The town of Diamond Hill has attracted hundreds of visitors over just the last few years because of a recent lead on an old legend.',
            'In the year 1920, travelers arrived in what would become Diamond Hill looking for hidden riches. The travelers banded together and set up a city and named it Diamond Hill, after the riches that were supposedly scattered among the area.',
            'Eight years later, an outsider looking for treasure made a surprising discovery that proved the legend true. Buried three feet beneath the ground was a small chest, with the initals F.T. engraved upon it. The visitor cracked open the chest, to find that it was full of glittering gold bars.',
            'Word spread quickly throughout Diamond Hill of the outsider\'s discovery, and the townspeople claimed that the treasure belonged to them because it was on their land. The discoverer disagreed, and the townspeople chased after him, hoping to get a share of the gold.',
            'The discoverer tried to drag away the chest, but it was too heavy. Secretly, he hid the fortune inside a small and secure hiding spot, planning to retrieve it later. But that day never came.',
            'Now, nearly a century later, the mayor has found new evidence pertaining to the long-lost treasure. You, an enthusiastic explorer, have agreed to meet with the mayor to go over information on the treasure.',
            'Apparently the original discoverer of the chest wrote a letter to a friend right before his death. It is just a small piece of paper with a riddle-like poem written on it.',
        ];
        this.whichText = 0;
    };
    intro.prototype.draw = function() {
        background(25);
        fill(235);
        textSize(20);
        text(this.texts[this.whichText], 50, 50, 500, 500);
        
        if(mouse.clicked){
            this.whichText ++;
            if(this.whichText > this.texts.length - 1){
                system.nextScene = 'Map';
                system.switchingScenes = true;
            }
        }
    };
    var Intro = new intro();
    
    var theMap = function(){
        this.rooftop = function(x, y, w, h, rot, txt){
            pushMatrix();
            translate(x, y);
            rotate(rot);
            fill(201, 136, 52);
            rect(0, 0, w, h);
            fill(0, 0, 0, 30);
            quad(0, 0, w, 0, w - (w/5), h/2, (w/5), h/2);
            fill(0, 0, 0, 100);
            quad(0, h, w, h, w - (w/5), h/2, (w/5), h/2);
            if(txt){
                textSize(15);
                text(txt.toUpperCase(), w/2, -10);
            }
            popMatrix();
        };
        
        this.star = function(x, y, nxt){
            if(dist(mouseX, mouseY, x, y) < 10){
                fill(242, 242, 242, 150);
                textSize(30);
                text('\u2605', x, y);
                mouse.overButton = true;
                if(mouse.clicked){
                    system.switchingScenes = true;
                    system.nextScene = nxt;
                }
            }
            fill(255, 255, 0);
            textSize(20);
            text('\u2605', x, y);
        };
    };
    theMap.prototype.draw = function() {
        noStroke();
        
        background(232, 157, 60);
        for(var i = 0; i < width; i += 10){
            fill(0, 0, 0, noise(i, 0.07)*200);
            rect(i, 0, 10, height);
        }
        
        fill(0, 0, 0, 30);
        rect(55, 135, 490, 347);
        fill(255, 255, 255);
        rect(50, 125, 500, 350, 10);
        
        noStroke();
        fill(255);
        textSize(55);
        text('DIAMOND HILL', 300, 70);
        textSize(20);
        text('the map of', 205, 30);
        
        noFill();
        stroke(158, 158, 158);
        strokeWeight(30);
        arc(320, 250, 200, 50, 0, 144);
        bezier(177, 176, 271, 192, 183, 228, 230, 259);
        line(420, 245, 408, 300);
        noStroke();
        
        // Buildings
        this.rooftop(80, 180, 100, 50, -15, 'Library');
        this.rooftop(365, 170, 100, 80, 0, 'Oak West Mall');
        this.rooftop(495, 170, 80, 30, 90);
        this.rooftop(315, 185, 50, 50);
        this.rooftop(335, 170, 30, 15);
        this.rooftop(365, 300, 80, 50, 10);
        this.rooftop(393, 295, 30, 10, 10, 'Bank');
        
        // Beach
        noStroke();
        fill(232, 224, 106);
        beginShape();
        vertex(550, 475);
        vertex(360, 475);
        bezierVertex(361, 400, 505, 451, 550, 376);
        endShape();
        fill(82, 169, 255);
        beginShape();
        vertex(550, 475);
        vertex(415, 475);
        bezierVertex(373, 400, 533, 492, 550, 402);
        endShape();
        
        // Hedgewood Park
        fill(37, 184, 54);
        ellipse(225, 330, 95, 95);
        for(var i = -15; i < 90; i += 15){
            strokeWeight(5);
            stroke(0, 0, 0, 10);
            line(200 + i, 290, 200, 300 + i);
            line(245 - i, 290, 255, 300 + i);
        }
        noStroke();
        fill(24, 158, 37);
        ellipse(246, 330, 10, 10);
        ellipse(251, 338, 15, 15);
        ellipse(207, 330, 10, 10);
        ellipse(215, 322, 15, 15);
        ellipse(225, 352, 15, 15);
        for(var i = 0; i < 360; i += 20){
            fill(46, 219, 69);
            ellipse((200) + (sin(i) * 50) + (noise(i / 60, 0.3) * 50), 300 + (cos(i)*50) + (noise(i/70, 0.5)*50), 30, 30);
            fill(0, 0, 0, 20);
            arc((200) + (sin(i) * 50) + (noise(i / 60, 0.3) * 50), 300 + (cos(i) * 50) + (noise(i / 70, 0.5)*50), 30, 30, -90, 90);
            fill(46, 219, 69);
            ellipse((200) + (sin(i)*50) + (noise(i/60, 0.3)*50), 300 + (cos(i)*50) + (noise(i/70, 0.5)*50), 10, 30);
        }
        fill(0, 0, 0, 100);
        textSize(15);
        pushMatrix();
        translate(265, 395);
        rotate(-25);
        text('HEDGEWOOD\nPARK', 0, 0);
        popMatrix();
        pushMatrix();
        translate(433, 410);
        rotate(-11);
        text('SEAGULL BEACH', 0, 0);
        popMatrix();
        
        for(var i = 50; i < 550; i += 10){
            for(var j = 125; j < 470; j += 10){
                fill(150, 150, 100, noise(i - j, 0.06)*205);
                rect(i, j, 10, 10);
            }
        }
        
        this.star(215, 340, 'Hedgewood');
        this.star(175, 176, 'Library');
        this.star(402, 319, 'Bank');
        this.star(416, 236, 'Oak West Mall');
        this.star(492, 426, 'Beach');
        
        fill(235);
        textSize(15);
        text('The clue the discoverer left should lead to somewhere in one of the places on this map. Click on a star to be transported to that place.', 50, 385, 500, 300);
    };
    var Map1 = new theMap();
}

draw = function() {
    // Load images
    for(var i in images){
        if (typeof images[i] !== "object") {
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    // Load font
    if (!fontloaded){
        loadGoogleFont("https://fonts.googleapis.com/css?family=" + myFont, callback, callback);
    }
    
    // Draw scenes
    switch(system.scene){
        case 'Menu':
            Menu.draw();
            break;
        case 'Credits':
            Credits.draw();
            break;
        case 'Intro':
            Intro.draw();
            break;
        case 'Map':
            Map1.draw();
            break;
        default:
            println('Uh, there isn\'t a scene called "' + system.scene + '".');
            noLoop();
            break;
    }
    
    // Cursor
    cursor(mouse.overButton ? 'pointer' : 'default');
    
    // Transitions
    {
        noStroke();
        fill(255, 255, 255, system.blackness);
        rect(0, 0, width, height);
        if(system.switchingScenes){
            system.blackSpeed = +10;
        }
        if(system.blackness > 255){
            system.scene = system.nextScene;
            system.switchingScenes = false;
            system.blackSpeed = -system.blackSpeed;
        }
        if(system.blackness < 0){ system.blackness = 0; }
        system.blackness += system.blackSpeed;
    }
    
    // Reset mouse events
    mouse.clicked = false;
    mouse.overButton = false;
};
