/**
 * Elevator
 * Chester Banks
 * May 6 2018
*/

/* 
    T A B L E   O F   C O N T E N T S
    
    Text settings
    Key events
    Collision detection function
    Floor graphic
    Images
        Noise texture
        Hotel
        Elevator
    Elevator
        Constructor
        Prototype
        Variable
    Collision boxes
    Person
        Constructor
        Prototype.applyCollisions
        Prototype.draw
        Variable
    Draw function
        Image loading
        Game scene
*/

var scene = 'Menu';

// Text settings
textFont(createFont('Courier'));
textAlign(CENTER, CENTER);

// Mouse properties
var overButton = false;
var clicked = false;

// Key events
var keys = [];
keyPressed = function(){ keys[keyCode] = true; };
keyReleased = function(){ keys[keyCode] = false; };
mouseClicked = function(){
    clicked = true;
};

// The rectangle collision function
var rectCollide = function(one, two){
    // Checks one's right side with two's left side, one's bottom side with two's top, one's left side with two's right side, and one's top side with two's bottom side (in that order).
    return one.x + one.w > two.x &&
        one.y + one.h > two.y &&
        one.x < two.x + two.w &&
        one.y < two.y + two.h;
};

var Floor = function(x, y, type){
    this.Painting = function(colo, shape, x, y, w, h, r){
        pushMatrix();
        translate(x, y);
        rotate(r);
        scale(w / 50, h / 50);
        strokeWeight(1);
        noFill();
        stroke(255);
        triangle(0, 0, 25, -25, 50, 0);
        strokeWeight(5);
        point(25, -25);
        strokeWeight(9);
        stroke(117, 81, 20);
        rect(0, 0, 50, 50);
        strokeWeight(3);
        stroke(156, 112, 36);
        fill(colo);
        rect(0, 0, 50, 50);
        fill(0);
        noStroke();
        if(shape === ':zoomeyes:'){
            for(var i = 0; i < 8; i += 1){
                pushMatrix();
                translate(i - 3, i - 3);
                fill(255, 255, 255, 50);
                ellipse(16, 25, 15, 28);
                ellipse(34, 25, 15, 28);
                fill(25, 25, 25, 100);
                ellipse(13, 29, 7, 14);
                ellipse(31, 29, 7, 14);
                popMatrix();
            }
        }
        if(shape === 'elmt'){
            noStroke();
            fill(247, 179, 102);
            rect(7, 7, 7, 7);
            rect(14, 14, 21, 7);
            rect(35, 7, 7, 7);
            rect(7, 20, 14, 7);
            rect(28, 20, 14, 7);
            rect(7, 20, 7, 14);
            rect(35, 20, 7, 14);
            rect(21, 35, 7, 7);
        }
        if(shape === ':angryCry:'){
            fill(235, 65, 91, 25);
            for(var i = 0; i < 40; i += 3){
                rect(0, 0, 50, i);
            }
            stroke(0);
            strokeWeight(5);
            arc(15, -50, 160, 160, 70, 75);
            arc(15, -50, 160, 160, 85, 90);
            strokeWeight(7);
            point(20, 33);
            point(40, 29);
            strokeWeight(4);
            arc(32, 54, 30, 30, -110, -70);
            noStroke();
            fill(41, 162, 227);
            bezier(15, 35, -4, 63, 38, 62, 15, 35);
            bezier(44, 35, 39, 54, 60, 62, 46, 31);
        }
        popMatrix();
    };
    
    pushMatrix();
    translate(x, y);
    scale(1.0);
    
    noStroke();
    if(type === 0){
        fill(238, 240, 189);
        rect(0, 0, 600, 190);
        fill(255, 255, 255, 100);
        for(var i = 0; i < 600; i += 50){
            rect(i, 0, 10 + random(30), 166);
        }
        fill(209, 110, 88);
        rect(0, 165, 600, 25);
        fill(0, 0, 0, 30);
        rect(0, 181, 600, 3);
        rect(0, 171, 600, 2);
        fill(173, 83, 60);
        rect(0, 190, 600, 10);
    } 
    
    if (type === 1){
        fill(96, 151, 219);
        rect(0, 0, 600, 190);
        stroke(0, 0, 0, 50);
        strokeWeight(1);
        for(var i = -52; i < 600; i += 28){
            line(i + 50, 0, i, 200);
            line(i - 50, 0, i, 200);
        }
        noStroke();
        fill(255, 255, 255);
        rect(0, 165, 600, 25);
        fill(219, 219, 219);
        rect(0, 190, 600, 10);
        for(var i = 0; i < 600; i += 40){
            fill(235);
            rect(i + 20, 165, 19, 7);
            rect(i, 173, 20, 9);
            rect(i + 20, 181, 20, 9);
        }
        this.Painting(color(227, 162, 41), ':angryCry:', 150, 71, 44, 44, 8);
    }
    
    if (type === 2){
        fill(247, 107, 181);
        rect(0, 0, 600, 190);
        fill(143, 53, 105, 50);
        for(var i = -4; i < 600; i += 50){
            for(var j = 18; j < 200; j += 50){
                ellipse(i, j, 20, 20);
                ellipse(i + 25, j + 25, 25, 25);
            }
        }
        fill(209, 58, 116);
        rect(0, 165, 600, 35);
        fill(0, 0, 0, 30);
        rect(0, 181, 600, 3);
        rect(0, 171, 600, 2);
        fill(0, 0, 0, 50);
        rect(0, 192, 600, 8);
        
        this.Painting(color(0, 0, 0), ':zoomeyes:', 64, 60, 33, 22, -11);
        this.Painting(color(255, 255, 255), 'elmt', 440, 71, 44, 44, 8);
    }
    
    noStroke();
    fill(255, 255, 255, 3);
    for(var i = 0; i < 146; i += 5){
        rect(0, 0, 600, i);
    }
    fill(0, 0, 0, 3);
    for(var i = 0; i < 72; i += 5){
        rect(0, 165 - i, 600, i);
    }
    
    popMatrix();
};

var images = {
    'noiseTexture': function(){
        var noiseScale=0.02;

        noStroke();
          for(var x=0; x < width; x+=5) {
              for(var y = 0; y < height; y +=5){
            var noiseVal = noise((x)*noiseScale, 
                                    y*noiseScale);
            fill(0, 0, 0, noiseVal*105);
            rect(x, y, 5, 5);
              }
          }
        
        return get(0, 0, width, height);
    },
    'hotel': function(){
        background(255, 255, 255);
        Floor(0, 0, 2);
        Floor(0, 200, 1);
        Floor(0, 400, 0);
        
        image(images.noiseTexture, 0, 165, 600, 35);
        
        pushMatrix();
        translate(158, 143);
        fill(0, 0, 0, 60);
        ellipse(0, 35 ,50, 10);
        fill(163, 110, 70);
        rect(-30, 3, 10, 30, 5);
        rect(20, 3, 10, 30, 5);
        fill(150, 102, 63);
        rect(-5, 3, 10, 40, 5);
        fill(166, 110, 64);
        ellipse(0, 3, 70, 25);
        fill(207, 139, 83);
        ellipse(0, 0, 70, 20);
        popMatrix();
        
        pushMatrix();
        translate(550, 343);
        scale(0.7, 1.0);
        fill(0, 0, 0, 60);
        ellipse(0, 35 ,50, 10);
        fill(163, 110, 70);
        rect(-30, 3, 10, 30, 5);
        rect(20, 3, 10, 30, 5);
        fill(150, 102, 63);
        rect(-5, 3, 10, 40, 5);
        fill(166, 110, 64);
        ellipse(0, 3, 70, 25);
        fill(207, 139, 83);
        ellipse(0, 0, 70, 20);
        popMatrix();
        
        pushMatrix();
        translate(450, 543);
        fill(0, 0, 0, 30);
        ellipse(0, 35 ,50, 10);
        fill(163, 110, 70);
        rect(-30, 3, 10, 30, 5);
        rect(20, 3, 10, 30, 5);
        fill(150, 102, 63);
        rect(-5, 3, 10, 40, 5);
        fill(166, 110, 64);
        ellipse(0, 3, 70, 25);
        fill(207, 139, 83);
        ellipse(0, 0, 70, 20);
        
        
        // lamp
        noStroke();
        fill(52, 159, 186);
        ellipse(0, -10, 30, 30);
        ellipse(0, -25, 15, 15);
        ellipse(0, -35, 8, 8);
        fill(255, 255, 255, 30);
        ellipse(-3, -12, 20, 20);
        fill(255, 255, 255);
        quad(-10, -60, 10, -60, 15, -35, -15, -35);
        ellipse(0, -35, 30, 10);
        fill(235, 235, 235);
        ellipse(0, -60, 20, 10);
        popMatrix();
        
        return get(0, 0, 600, 600);
    },
    'shaft': function(){
        fill(31, 31, 31);
        rect(225, 0, 150, 600);
        stroke(0, 0, 0, 30);
        for(var i = 0; i < 100; i += 14){
            strokeWeight(i);
            line(300, 0, 300, 600);
        }
        
        return get(0, 0, width, height);
    },
    'hotelBlurred': function(){
        image(images.hotel, 0, 0);
        filter(BLUR, 1.5);
        
        return get(0, 0, 600, 600);
    },
    'elevator': function(){
        pushMatrix();
        translate(75, 20);
        noStroke();
        fill(181, 181, 181);
        rect(-75, 0, 150, 200);
        fill(0, 0, 0, 20);
        for(var i = -62; i < 70; i += 15){
            rect(i, 0, 1, 175);
        }
        fill(54, 54, 54);
        rect(-75, 191, 150, 10);
        rect(-75, 6, 150, 10);
        fill(115, 115, 115);
        rect(-75, 165, 150, 26);
        rect(-75, -20, 150, 26);
        
        noStroke();
        fill(255, 255, 255, 15);
        for(var i = 0; i < 146; i += 5){
            rect(-75, 16, 150, i);
        }
        fill(0, 0, 0, 3);
        for(var i = 0; i < 72; i += 5){
            rect(-75, 187 - i, 149, i);
        }
        
        image(images.noiseTexture, -75, 16, 150, 149);
        
        pushMatrix();
        translate(33, 67);
        for(var i = 0; i < 3; i ++){
            for(var j = 0; j < 5; j ++){
                fill(120, 120, 120);
                ellipse(i * 10, j * 10, 9, 9);
                fill(153, 153, 153);
                ellipse(i * 10, j * 10, 7, 7);
                fill(255);
                textSize(6);
                text(i+j, i * 10, j * 10);
            }
        }
        popMatrix();
        
        
        fill(176, 139, 39);
        rect(-60, 123, 9, 9, 20);
        rect(48, 123, 9, 9, 20);
        fill(222, 176, 49);
        rect(-68, 128, 135, 9, 20);
        fill(255, 255, 255, 100);
        rect(-68, 128, 135, 5, 20);
        popMatrix();
            
        return get(0, 0, 150, 220);
    },
    'menuBG': function(){
        rectMode(CENTER);
        background(232, 126, 204);
        
        pushMatrix();
        scale(3);
        noStroke();
        fill(143, 53, 105, 30);
        for(var i = -4; i < 210; i += 50){
            for(var j = 18; j < 177; j += 50){
                ellipse(i, j, 20, 20);
                ellipse(i + 25, j + 25, 25, 25);
            }
        }
        popMatrix();
        strokeWeight(1);
        beginShape();
        vertex(126, 121);
        bezierVertex(251, 131, 352, 126, 476, 123);
        vertex(463, 550);
        vertex(137, 550);
        endShape();
        fill(232, 232, 223);
        rect(300, 345, 314, 410);
        fill(0, 0, 0, 30);
        quad(160, 168, 439, 167, 433, 550, 170, 550);
        fill(250, 250, 250);
        rect(300, 361, 263, 369);
        fill(43, 29, 24);
        rect(300, 362, 1, 375);
        fill(43, 29, 24, 5);
        for(var i = 0; i < 19; i += 3){
            rect(300, 362, i, 375);
        }
        noFill();
        
        stroke(255, 255, 255);
        quad(158, 165, 442, 165, 433, 550, 170, 550);
        strokeWeight(3);
        stroke(0, 0, 0, 30);
        line(144, 141, 160, 168);
        line(456, 141, 438, 167);
        
        strokeWeight(12);
        stroke(255, 255, 255, 20);
        fill(240, 240, 235);
        beginShape();
        vertex(0, 515);
        vertex(-17, 488);
        bezierVertex(10, 511, 175, 500, 143, 515);
        endShape();
        
        beginShape();
        vertex(600, 515);
        vertex(637-17, 488);
        bezierVertex(600, 511, 600, 500, 456, 515);
        endShape();
        
        noStroke();
        fill(232, 232, 223);
        rect(54, 532, 177, 35);
        rect(545, 532, 177, 35);
        
        fill(242, 164, 223);
        rect(300, 575, 600, 50);
        
        fill(0, 0, 0, 20);
        beginShape();
        vertex(0, 550);
        vertex(0, 566);
        bezierVertex(180, 554, 432, 550, 600, 565);
        vertex(600, 550);
        endShape();
        beginShape();
        vertex(0, 550);
        vertex(-25, 588);
        bezierVertex(180, 554, 432, 550, 630, 592);
        vertex(600, 550);
        endShape();
        
        fill(163, 163, 163);
        ellipse(500, 300, 35, 35);
        ellipse(500, 339, 30, 30);
        fill(237, 237, 237);
        arc(500, 300, 35, 35, -180, 0);
        arc(500, 339, 30, 30, -180, 0);
        fill(232, 232, 232);
        ellipse(500, 300, 30, 30);
        ellipse(500, 339, 25, 25);
        fill(240, 65, 150);
        textSize(23);
        text('\u25B2', 500, 298);
        textSize(15);
        text('\u25BC', 500, 341);
        
        rectMode(CORNER);
        
        filter(BLUR, 2);
        
        return get(0, 0, 600, 600);
    },
};

var Elevator = function(){
    this.x = 300;
    this.y = 200;
    
    this.destiny = 200;
    this.go = false;
};
Elevator.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    
    image(images.elevator, -75, -21);
    
    popMatrix();
    
    
    if(keys[UP] && !this.go){
        this.destiny -= 200;
        this.go = true;
    }
    if(keys[DOWN] && !this.go){
        this.destiny += 200;
        this.go = true;
    }
    if(!keys[UP] && !keys[DOWN]){ this.go = false; }
    
    this.y += (this.destiny - this.y) / 5;
};
var elevator = new Elevator();

var collisionBoxes = [
    {x: elevator.x - 75, y: elevator.y + 180, w: 150, h: 20},
    {x: elevator.x - 75, y: elevator.y + -20, w: 150, h: 20},
    {x: -50, y: 180, w: 275, h: 20},
    {x: 375, y: 180, w: 275, h: 20},
    {x: -50, y: 380, w: 275, h: 20},
    {x: 375, y: 380, w: 275, h: 20},
    {x: -50, y: 580, w: 275, h: 20},
    {x: 375, y: 580, w: 275, h: 20},
];

var Person = function(){
    this.x = -50 + floor(random(2)) * 700;
    this.y = 150 + floor(random(3)) * 200;
    this.w = 30;
    this.h = 30;
    
    this.xvel = this.x < 50 ? 1 : -1;
    
    this.yvel = 0;
};
Person.prototype.applyCollisions = function(xvel, yvel) {
    for (var i = 0; i < collisionBoxes.length; i++) {
        if (!rectCollide(this, collisionBoxes[i])) { continue; }
        if (yvel < 0) {
            this.y = collisionBoxes[i].y + collisionBoxes[i].h;
            this.yvel = 0;
        }
        if (yvel > 0) {
            this.y = collisionBoxes[i].y - this.h;
            this.yvel = 0;
            this.jumping = false;
        }
    }
};
Person.prototype.draw = function() {
    fill(0, 0, 0);
    
    rect(this.x, this.y, this.w, this.h);
    
    this.x += this.xvel;
    this.applyCollisions(this.xvel, 0);
    this.y += this.yvel;
    this.applyCollisions(0, this.yvel);
    this.yvel += 0.6;
};
var People = [];

var myText = function(txt, x, y, sz, jiggle){
    textSize(sz);
    for(var i = 0; i < txt.length; i ++){
        fill(0);
        if(i % 2 === 0 && txt[i] !== ' '){
            fill(0);
            rect(x + sz + i * sz, y + (jiggle ? sin((i*30)+frameCount*5)*5 : 0), sz * 1.05, sz * 1.05);
            fill(255, 255, 255);
        }
        text(txt[i], x + (sz * 1.5) + i * sz, y + (sz / 2) + (jiggle ? sin((i*30)+frameCount*5)*5 : 0));
    }
};

var Button = function(x, y, sz, nxt){
    this.x = x;
    this.y = y;
    this.sz = sz;
    this.nxt = nxt;
    
    this.plusSz = 0;
};
Button.prototype.draw = function() {
    pushMatrix();
    translate(this.x, this.y);
    rotate(10 +this.sz - (this.plusSz * 180));
    scale((this.sz / 175) + this.plusSz);
    translate(-200, -175);
    strokeWeight(35);
    stroke(0, 0, 0, 20);
    beginShape();
    vertex(200, 85);
    vertex(275, 130);
    vertex(275, 220);
    vertex(200, 260);
    vertex(125, 220);
    vertex(125, 130);
    vertex(200, 85);
    endShape();
    strokeWeight(15);
    stroke(255, 255, 255);
    fill(30, 73, 87);
    beginShape();
    vertex(200, 85);
    vertex(275, 130);
    vertex(275, 220);
    vertex(200, 260);
    vertex(125, 220);
    vertex(125, 130);
    vertex(200, 85);
    endShape();
    
    stroke(43, 20, 7, 210);
    stroke(7, 34, 41, 210);
    beginShape();
    vertex(200, 95);
    vertex(265, 140);
    vertex(265, 210);
    vertex(200, 250);
    vertex(135, 210);
    vertex(135, 140);
    vertex(200, 95);
    endShape();
    
    noFill();
    if(this.nxt === 'Game'){
        strokeWeight(5);
        stroke(255, 255, 255);
        triangle(217, 203, 173, 174, 217, 144);
    }
    if(this.nxt === 'How'){
        pushMatrix();
        translate(196, 175);
        rotate(-112);
        textSize(78);
        fill(255);
        text('?', 0, 0);
        popMatrix();
    }
    if(this.nxt === 'About'){
        pushMatrix();
        translate(190, 205);
        rotate(-112);
        stroke(255);
        strokeWeight(8);
        for(var i = 0; i < 3; i ++){
            line(0, i * 20, 50, i * 20);
        }
        popMatrix();
    }
    
    popMatrix();
    
    if(dist(mouseX, mouseY, this.x, this.y) < this.sz / 2){
        overButton = true;
        this.plusSz += (0.1 - this.plusSz) / 6;
        if(clicked){
            scene = this.nxt;
        }
    } else {
        this.plusSz += (0 - this.plusSz) / 6;
    }
};

var menuSz = 71;

var trans = {
    active: false,
    out: false,
    nextScene: '',
    sizeDivide: 0.1,
};

draw = function() {
    for(var i in images){
        if(typeof images[i] !== 'object'){
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    if(scene === 'Menu'){
        background(115, 175, 240);
        
        pushMatrix();
        translate(300, 200);
        scale(1 + menuSz);
        rotate(menuSz * 2);
        translate(-300, -200);
        
        textFont(createFont('Trocchi'));
        
        image(images.menuBG, 0, 0);
        
        noStroke();
        pushMatrix();
        translate(0, 8);
        fill(255, 255, 255, 100);
        rect(11, 150, 581, 133);
        myText('ELEVATOR', 11, 200, 60);
        myText('CHESTER BANKS', 49, 163, 22);
        popMatrix();
        
        noFill();
        stroke(255, 255, 255);
        strokeWeight(3);
        rect(10, 10, 580, 580);
        strokeWeight(1);
        rect(4, 5, 591, 590);
        
        noStroke();
        fill(255);
        fill(0);
        myText('CLICK TO BEGIN', 141, 307, 20, true);
        
        popMatrix();
        
        menuSz /= 1.05;
        
        if(clicked){ 
            trans.active = true; 
            trans.nextScene = 'How';
        }
    }
    if(scene === 'How'){
        image(images.menuBG, 0, 0);
        
        noStroke();
        myText('INSTRUCTIONS', 0, 38, 44);
        
        
    }
    if(scene === 'Game'){
        image(images.hotel, 0, 0);
        image(images.shaft, 0, 0);
        
        noFill();
        stroke(255);
        strokeWeight(2);
        ellipse(203, 29, 27, 28);
        ellipse(201, 429, 27, 28);
        ellipse(474, 227, 27, 28);
        noStroke();
        fill(255);
        ellipse(203, 29, 20, 20);
        ellipse(201, 429, 20, 20);
        ellipse(474, 227, 20, 20);
        
        fill(0, 0, 0);
        textSize(21);
        text('FLOOR 3', 165, 28);
        text('FLOOR 2', 436, 226);
        text('FLOOR 1', 163, 427);
        
        
        elevator.draw();
        
        collisionBoxes[0] = {x: elevator.x - 75, y: elevator.y + 180, w: 150, h: 20};
        collisionBoxes[1] = {x: elevator.x - 75, y: elevator.y + -20, w: 150, h: 20};
        
        if(frameCount % 100 === 0){
            People.push(new Person());
        }
        for(var i = People.length - 1; i >= 0; i --){
            People[i].draw();
        }
    }
    
    // Transition
    if(trans.active){
        for(var i = 0; i < 845; i += 50){
            var weight = 64 - (i / trans.sizeDivide);
            
            noFill();
            strokeWeight(weight);
            stroke(255);
            if(weight > 0){
                ellipse(300, 300, i, i);
            }
        }
        
        if(!trans.out){
            trans.sizeDivide += 0.5;
            if(trans.sizeDivide > 22){
                scene = trans.nextScene;
                trans.out = true;
            }
        } else {
            trans.sizeDivide -= 0.5;
            if(trans.sizeDivide < 0.2){
                trans.sizeDivide = 0.2;
                trans.active = false;
                trans.out = false;
            }
        }
    }
    
    
    rectMode(CORNER);
    
    cursor(overButton ? 'pointer' : 'default');
    
    overButton = false;
    clicked = false;
};
