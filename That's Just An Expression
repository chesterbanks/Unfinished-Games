/**
 * That's Just An Expression
 * Chester Banks
 * January 4 2016
 * 
 * My first game in 2017! I hope to make 20+ games this year!
 * 
 * This program's LUCKY SUBSCRIBER is NAME HERE! Find their profile here: khanacademy.org/profile/namehere
 * Liked this game? Subscribe to me here: khanacademy.org/cs/cb/4790207744704512
*/

var clicked = false, overButton = false;
mouseClicked = function(){ clicked = true; };

var keys = [];
keyPressed = function(){ keys[keyCode] = true; };
keyReleased = function(){ keys[keyCode] = false; };

var rectCollide = function(one, two){
    if(one.x+one.w > two.x && one.y+one.h > two.y && one.x < two.x+two.w && one.y < two.y+two.h){
        return true;
    }
};

var scene = 'Menu';
var lives = 3;

var trans = {sz: 480, active: false, nextScene: 'Game', out: false};

textFont(createFont('Avenir Bold'));

var button = function(txt, x, y, next){
    pushStyle();
    textSize(25);
    textAlign(LEFT, BASELINE);
    if(mouseY > y - 17 && mouseY < y){
        overButton = true;
        fill(25);
        text('> ' + txt, x, y);
        if(clicked){
            trans.nextScene = next;
            trans.active = true;
            clicked = false;
        }
    } else {
        fill(255);
        text(txt, x, y);
    }
    popStyle();
};
var button2 = function(x, y, txt, w, h, n, tSize, settings){
    this.x = x;
    this.y = y;
    this.txt = txt;
    this.trans = 20;
    this.tSp = 20;
    this.txtColor = 255;
    this.w = w;
    this.h = h;
    this.n = n;
    this.tSize = tSize;
    this.settings = settings;
};
button2.prototype.draw = function() {
    pushStyle();
    rectMode(CENTER);
    stroke(255); // White stroke
    strokeWeight(2); // Thin stroke
    fill(255, 255, 255, this.trans); // Fill it white with the current transparency (20)
    (rect)(this.x, this.y, this.w, this.h, 0, 15, 0, 15); // Draw button
    this.trans += this.tSp; // Transparency rising with the transparency speed (which is -20)
    fill(this.txtColor, this.txtColor, this.txtColor); // Text color
    this.txtColor -= this.tSp; // Text color decreasing with the transparency speed (which is -20)
    textSize(this.tSize); // Text size
    text(this.txt, this.x, this.y);
    if(mouseX > this.x - this.w/2 && mouseX < this.x + this.w/2 && mouseY > this.y - this.h/2 && mouseY < this.y + this.h/2){
        this.tSp = 10; // If mouse is in button, then set transparency speed to +10
        if(clicked){ // If mouse is clicked,
            this.trans = 0; // Transparency is zero
            this.txtColor = 255; // Text color is white
            trans.nextScene = this.n;
            trans.active = true; // And we're off the current page.
        }
    } else { // If mouse isn't in button
        this.tSp = -10; // Set transparency speed to -10
        this.txtColor = 255; // And text color to white
    }
    if(this.trans > 255){ // If transparency is any more than 255,
        this.trans = 255; // Then it will return back to 255.
    }
    if(this.trans < 20){ // If transparency is any less than 20,
        this.trans = 20; // Then it will return back to 20.
    }
    popStyle();
};
var buttons = {
    wrongTree: new button2(250, 100, "BARKING UP THE WRONG TREE", 430, 60, "Play", 20),
    silverLining: new button2(250, 170, "EVERY CLOUD HAS A SILVER LINING", 430, 60, "Play", 20),
    spillBeans: new button2(250, 240, "SPILL THE BEANS", 430, 60, "Play", 20),
    catsAndDogs: new button2(250, 310, "IT'S RAINING CATS AND DOGS", 430, 60, 'Cats', 20),
    greenerGrass: new button2(250, 380, "GRASS IS GREENER ON THE OTHER SIDE", 430, 60, "Play", 20),
    disguisedBlessing: new button2(250, 450, "BLESSING IN DISGUISE", 430, 60, "Play", 20),
};

var colorfulBG = function(){
    noStroke();
    for(var i = 0; i < 250; i += 10){
        fill(lerpColor(color(30, 184, 99), color(214, 217, 32), i/250));
        rect(0, i, 600, 10);
        
        fill(lerpColor(color(214, 217, 32), color(74, 190, 240), i/250));
        rect(0, i + 250, 600, 10);
    }
    for(var i = -80 + frameCount%40; i < width; i += 40){
        for(var j = -80 + frameCount*2%40; j < height; j += 40){
            fill(0, 0, 0, 30);
            rect(i, j, 30, 30, -6);
            rect(i+10, j+10, 20, 20, -5);
        }
    }
};

var catsAndDogs = function(){
    this.Block = function(){
        this.x = random(width); 
        this.y = -50;
        this.w = 50;
        this.h = 25;
        this.r = random(-10, 10);
        this.collidable = true;
    };
    this.Blocks = [];
    this.Block.prototype.draw = function() {
        noStroke();
        pushMatrix();
        translate(this.x, this.y);
        fill(163, 113, 80);
        rect(4, 18, 10, 15, 8);
        rect(34, 18, 10, 15, 8);
        fill(196, 136, 94);
        rect(7, 20, 10, 15, 8);
        rect(38, 20, 10, 15, 8);
        rect(10, 30, 10, 5, 8);
        rect(41, 30, 10, 5, 8);
        fill(196, 136, 94);
        rect(0, 0, this.w, this.h, 8);
        fill(209, 150, 111);
        rect(34, -23, 10, 15, 7);
        rect(51, -21, 10, 15, 7);
        fill(0, 0, 0, 30);
        rect(36, -19, 7, 10, 7);
        rect(53, -18, 7, 10, 7);
        fill(209, 150, 111);
        rect(35, -15, 25, 30, 7);
        fill(45);
        ellipse(43, -3, 5, 5);
        ellipse(52, -3, 5, 5);
        triangle(45, 2, 51, 2, 48, 5);
        noFill();
        stroke(45);
        strokeWeight(1);
        arc(45, 4, 5, 5, 0, 180);
        arc(51, 4, 5, 5, 0, 180);
        strokeWeight(5);
        stroke(196, 136, 94);
        arc(8, -9, 30, 26, 90, 228);
        popMatrix();
        
        if(this.y < 418){
            this.y += 5; 
        } else {
            this.x += 3;
        }
    };
    
    this.Player = function(){
        this.x = 200;
        this.y = 423; 
        this.w = 25;
        this.h = 30;
        
        this.yvel = -10;
        this.jumping = false;
    };
    this.Player.prototype.draw = function() {
        noStroke();
        fill(245, 245, 245);
        rect(this.x, this.y, this.w, this.h); 
        if(keys[RIGHT]){ 
            this.x += 5; 
        }
        if(keys[LEFT]){ 
            this.x -= 5;
        }
        if(keys[UP]){
            this.jumping = true;
        }
        
        if(this.jumping){
            this.y += this.yvel;
            this.yvel += 0.3;
        }
        if(this.y > 423){
            this.jumping = false;
            this.yvel = -10;
            this.y = 423;
        }
    };
    this.player = new this.Player();
};
catsAndDogs.prototype.draw = function() {
    for(var i = 0; i < 600; i += 10){
        fill(lerpColor(color(31, 113, 184), color(186, 226, 245), i/600));
        rect(0, i, 600, 10);
    }
    
    for(var i in this.Blocks){
        if(rectCollide(this.player, this.Blocks[i]) && this.Blocks[i].collidable){
            lives --;
            this.Blocks[i].collidable = false;
        }
    }
    
    if(frameCount % 30 === 5){
        this.Blocks.push(new this.Block());
    }

    for(var i = 0; i < this.Blocks.length; i ++){
        this.Blocks[i].draw();
        if(this.Blocks[i].x > 530){
            this.Blocks.splice(i, 1);
            i --;
        }
    }
    
    // Platform
    pushStyle();
    rectMode(CENTER);
    noStroke();
    fill(100);
    rect(250, 480, 600, 40);
    fill(0, 0, 0, 50);
    rect(300, 463, 600, 10);
    fill(161, 161, 161);
    rect(300, 460, 600, 10);
    fill(145, 145, 145);
    rect(300, 453, 600, 6);
    popStyle();
    
    for(var i = 0; i < width; i += 20){
        fill(176, 176, 176, random(150));
        rect(i, 585 + random(-15, 10), random(4, 8), random(4, 8));
        rect(i + 10, 585 + random(-15, 10), random(4, 8), random(4, 8));
    }
    
    this.player.draw();
    
    fill(245);
    textSize(15);
    text('Lives: ' + lives, 50, 30);
};
var game1 = new catsAndDogs();

draw = function() {
    textAlign(CENTER, CENTER);
    
    colorfulBG();
    if(scene === 'Menu'){
        pushStyle();
        textAlign(LEFT, BASELINE);
        fill(0, 0, 0, 30);
        textSize(60);
        textLeading(60);
        text('THAT\'S\nJUST\nAN\nEXPRESSION', 40, 110);
        fill(255);
        text('THAT\'S\nJUST\nAN\nEXPRESSION', 40, 100);
        textSize(20);
        text('CHESTER BANKS | JANUARY 2016', 40, 310);
        textSize(25);
        button('PLAY', 40, 350, 'Levels');
        button('INSTRUCTIONS', 40, 375, 'Instructions');
        button('SETTINGS', 40, 400, 'Settings');
        button('CREDITS', 40, 425, 'Credits');
        button('UPDATE LOG', 40, 450, 'Updates');
        popStyle();
    }
    if(scene === 'Instructions'){
        fill(255);
        textSize(45);
        text('INSTRUCTIONS.', 250, 60); 
        
        button('BACK', 30, 470, 'Menu');
    }
    if(scene === 'Settings'){
        fill(255);
        textSize(45);
        text('SETTINGS.', 250, 60); 
        
        button('BACK', 30, 470, 'Menu');
    }
    if(scene === 'Credits'){
        fill(255);
        textSize(45);
        text('CREDITS.', 250, 60); 
        
        button('BACK', 30, 470, 'Menu');
    }
    if(scene === 'Updates'){
        fill(255);
        textSize(45);
        text('UPDATE LOG.', 250, 60); 
        
        button('BACK', 30, 470, 'Menu');
    }
    
    if(scene === 'Levels'){
        fill(255);
        textSize(50);
        text('LEVELS.', 170, 50);
        
        buttons.wrongTree.draw();
        buttons.silverLining.draw();
        buttons.spillBeans.draw();
        buttons.catsAndDogs.draw();
        buttons.greenerGrass.draw();
        buttons.disguisedBlessing.draw();
    }
    
    if(scene === 'Cats'){
        game1.draw();
    }
    
    cursor(overButton ? 'pointer' : 'default');
    
    noFill();
    stroke(255);
    if(trans.out){
        strokeWeight(trans.sz);
    } else {
        strokeWeight(500 - trans.sz);
    }
    rect(0, 0, width, height);
    
    if(trans.active){
        trans.sz /= 1.5;
        if(trans.sz < 10 && !trans.out){
            trans.sz = 480;
            trans.out = true;
            scene = trans.nextScene;
        }
        if(trans.out && trans.sz < 20){
            trans.active = false;
            trans.sz = 480;
            trans.out = false;
        }
    }
    
    clicked = false;
    overButton = false;
};
