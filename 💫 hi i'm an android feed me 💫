// drop food to the androids
// they are constantly getting more hungry
// don't let them run out of energy
    // hamburgers +10
    // fries +5
    // apples +5
    // cherries +1
    // bombs -5 (drop these on the floor)

// don't drop too much food on the floor
    // if you drop 10 items on the floor you lose
    // if you feed the androids 3 times in a row, your dropping count is cleared

textFont(createFont('avenir'));
textAlign(CENTER, CENTER);

var clicked = false;
mouseClicked = function(){ clicked = true; };

var rectCircleCollide = function(r, c){
    return dist(r.x, r.y, c.x, c.y) < c.sz / 2 || 
        dist(r.x + r.w, r.y, c.x, c.y) < c.sz / 2 ||
        dist(r.x, r.y + r.h, c.x, c.y) < c.sz / 2 ||
        dist(r.x + r.w, r.y + r.h, c.x, c.y) < c.sz / 2 ||
        (c.x + (c.sz / 2) > r.x && c.x + (c.sz / 2) < r.x + r.w && c.y > r.y && c.y < r.y + r.h) ||
        (c.x - (c.sz / 2) > r.x && c.x - (c.sz / 2) < r.x + r.w && c.y > r.y && c.y < r.y + r.h) ||
        (c.x > r.x && c.x < r.x + r.w && c.y + (c.sz / 2) > r.y && c.y + (c.sz / 2) < r.y + r.h) || 
        (c.x > r.x && c.x < r.x + r.w && c.y - (c.sz / 2) > r.y && c.y - (c.sz / 2) < r.y + r.h);
};

var Food = function(x, power){
    this.x = x;
    this.y = 50;
    this.power = power;
};
Food.prototype.draw = function() {
    fill(255);
    ellipse(this.x, this.y, 15, 15);
    
    this.y += this.power;
};
var Foods = [];

var Bot = function(startX){
    this.x = startX;
    this.y = 478;
    this.w = 50;
    this.h = 72;
    this.hunger = -4;
    
    this.xvel = 3;
    
    this.phrases = 'i need food, please, feed me, plz feed me, give me food, i need to eat, me hungry, im hungry, need food, plz, quiero comida, i want food, yum food, more, can i have food, give me more, food is amazing, i luv food, yummy food'.split(', ');
    this.phrase = this.phrases[floor(random(this.phrases.length))];
    this.phraseTimer = random(360);
};
Bot.prototype.draw = function() {
    fill(25);
    //rect(this.x, this.y, this.w, this.h);
    
    pushMatrix();
    translate(this.x + this.w / 2, this.y + this.h / 2);
    
    rectMode(CENTER);
    
    if(this.phraseTimer < 180){
        fill(245);
        rect(0, -80, 91, 25, 5);
        triangle(-20, -80, 20, -80, 0, -60);
        fill(25);
        text(this.phrase, 0, -80);
    }
    if(this.phraseTimer > 350){
        this.phrase = this.phrases[floor(random(this.phrases.length))];
    }
    
    if(this.xvel > 0){
        scale(-1, 1);
    }
    
    pushMatrix();
    translate(0, -20);
    rotate(sin(frameCount * 5) * 60);
    fill(235);
    rect(0, 20, 13, 37, 5);
    popMatrix();
    pushMatrix();
    rotate(sin(frameCount * 5) * 20);
    fill(225);
    rect(0, 21, 13, 29, 5);
    rotate(-sin(frameCount * 5) * 40);
    fill(245);
    rect(0, 21, 13, 29, 5);
    popMatrix();
    
    fill(245);
    (rect)(0, -4, 35, 43, 0, 0, 5, 5);
    pushMatrix();
    translate(17, -27);
    rotate(20 -sin(frameCount * 15) * 15);
    arc(-17, 0, 35, 40, -180, 0);
    fill(0);
    ellipse(-25, -6, 5, 5);
    popMatrix();
    
    
    rectMode(CORNERS);
    fill(232, 89, 49, 150);
    rect(-15, 17, 15, -this.hunger);
    fill(255, 255, 255, 50);
    rect(0, 17, 12, -this.hunger);
    
    rectMode(CENTER);
    pushMatrix();
    translate(0, -20);
    rotate(-sin(frameCount * 5) * 60);
    fill(255, 255, 255);
    rect(0, 20, 13, 37, 5);
    popMatrix();
    
    rectMode(CORNER);
    popMatrix();
    
    this.x += this.xvel;
    if(this.x + this.w > width || this.x < 0){
        this.xvel = -this.xvel;
    }
    
    this.phraseTimer = (this.phraseTimer + 1) % 360;
    
    this.hunger += 0.02;
};

var bots = [new Bot(350), new Bot(100)];

var ballPower = 0, bSpeed = 1;

draw = function() {
    noStroke();
    for(var i = 0; i < height; i += 5){
        fill(lerpColor(
            color(40, 189, 122),
            color(121, 232, 134),
            i / height));
        rect(0, i, 400, 5);
    }
    
    fill(227, 255, 242);
    rect(0, 550, 400, 50);
    
    bots[0].draw();
    bots[1].draw();
    
    for(var i = Foods.length - 1; i >= 0; i --){
        Foods[i].draw();
    }
    
    fill(255, 255, 255, 50);
    rect(mouseX - 20, 20, 40, 10);
    fill(255, 255, 255, 50);
    rect(mouseX - 20, 20, ballPower, 10);
    fill(255);
    ellipse(mouseX, 50, 15, 15);
    
    if(mouseIsPressed){
        ballPower += bSpeed;
        if(ballPower > 40 || ballPower < 0){
            bSpeed = -bSpeed;
        }
    } else {
        ballPower = 0;
    }
    if(clicked){
        Foods.push(new Food(mouseX, ballPower / 2));
    }
    
    clicked = false;
};
