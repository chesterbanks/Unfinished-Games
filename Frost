textAlign(CENTER, CENTER);

var fonts = {
    h1: createFont('AvenirNext-UltraLight'),
    h3: createFont('Avenir'),
};

// Helpful little graphics functions
var tree = function(x, y, sz){
    pushMatrix();
    translate(x, y);
    scale(sz/10);
    strokeCap(SQUARE);
    strokeWeight(5);
    noStroke();
    fill(163, 102, 16);
    rect(-10, 68, 20, 50);
    fill(0, 122, 49);
    triangle(0, -105, -60, 70, 60, 70);
    for(var i = -57; i < 60; i += 5){
        stroke(255, 255, 255, i/3 + 40);
        line(0, -105, i, 70);
    }
    noStroke();
    triangle(0, -105, -55, 25, 55, 25);
    for(var i = -50; i < 55; i += 5){
        stroke(255, 255, 255, i/3 + 40);
        line(0, -105, i, 25);
    }
    noStroke();
    triangle(0, -100, -50, -20, 50, -20);
    for(var i = -44; i < 50; i += 5){
        stroke(255, 255, 255, i/3 + 40);
        line(0, -100, i, -20);
    }
    popMatrix();
};

var images = {
    "bg1": function(){
        noStroke();
        for(var i = 0; i < height; i += 20){
            fill(lerpColor(
                color(26, 44, 54), color(69, 120, 138), i / height));
            rect(0, i, width, 20);
            for(var j = 0; j < width; j += 5){
                fill(255, 255, 255, random(10));
                rect(j, i, 5 + random(-2, 2), 20  + random(-2, 10));
            }
        }
        
        fill(245);
        rect(0, 300, width, 100);
        
        for(var i = 0; i < width + 10; i += 30){
            for(var j = 300; j < 410; j += 30){
                tree(i + random(15), j + random(15), random(1, 6));
            }
        }
        
        noStroke();
        fill(255, 255, 255, 10);
        for(var i = 50; i < 100; i += 5){
            ellipse(500, 100, i, i);
        }
        fill(210);
        ellipse(500, 100, 50, 50);
        
        filter(BLUR, 2);
        
        return get(0, 0, width, height);
    },
    "dirtBlock": function(){
        noStroke();
        fill(148, 92, 18);
        rect(0, 0, 20, 20);
        for(var i = 0; i < 20; i += 5){
            for(var j = 0; j < 20; j += 5){
                fill(0, 0, 0, random(30, 100));
                rect(i+random(-2, 2), j+random(-2, 2), 2, 2);
            }
        }
        fill(0, 0, 0, 30);
        rect(0, 0, 5, 20);
        fill(255, 255, 255, 30);
        rect(15, 0, 5, 20);
        
        return get(0, 0, 20, 20);
    },
    "snowBlock": function(){
        noStroke();
        fill(148, 92, 18);
        rect(0, 0, 20, 20);
        fill(255, 255, 255);
        rect(0, 0, 20, 5);
        for(var i = 0; i < 20; i += 5){
            for(var j = 0; j < 20; j += 5){
                fill(0, 0, 0, random(30, 100));
                rect(i+random(-2, 2), j+random(-2, 2), 2, 2);
            }
        }
        fill(0, 0, 0, 30);
        rect(0, 0, 5, 20);
        fill(255, 255, 255, 30);
        rect(15, 0, 5, 20);
        
        return get(0, 0, 20, 20);
    },
};

// This helps with key movement
var keys = [];
var keyPressed = function(){ keys[keyCode] = true; };
var keyReleased = function(){ keys[keyCode] = false; };
var clicked = false;
mouseClicked = function(){ clicked = true; };

// The rectangle collision function
var rectCollide = function(one, two){
    if( one.x+one.w > two.x &&
        one.y+one.h > two.y &&
        one.x < two.x+two.w &&
        one.y < two.y+two.h){
        return true;
    }
};

// Snow (the flakes falling from the sky, not the president)
var Snow = function(){
    this.x = random(width);
    this.y = random(-20, -100);
    this.sz = random(1, 10);
    this.trans = random(100);
    this.xSp = random(-1, 1);
    this.rot = random(5);
};
var Snows = []; // sometimes you need to use bad grammar
Snow.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, this.trans);
    pushMatrix();
    translate(this.x, this.y);
    rotate(frameCount * this.rot);
    rect(0, 0, this.sz, this.sz, -5);
    popMatrix();
    
    this.y += this.sz;
    this.x += this.xSp * this.sz / 4;
};

// Vital variables
var scene = 'Menu';
var level = 0;

var trans = { active: false, plusX: 400, rot: 90, w: 590, out: false, type: 'Game'};

// Toaster
var Toaster = function(x, y, con){
    this.originalX = x;
    this.x = x;
    this.y = y;
    this.w = 30;
    this.h = 30;
    this.xvel = 1;
    this.con = con;
    
    this.particle = function(x, y){
        this.x = x;
        this.y = y;
        this.sz = random(10);
        this.trans = 255;
        this.rot = random(10);
    };
    this.particles = [];
    this.particle.prototype.draw = function() {
        noStroke();
        fill(25, 25, 25, this.trans);
        pushMatrix();
        translate(this.x, this.y);
        rotate(frameCount*this.rot);
        rectMode(CENTER);
        rect(0, 0, this.sz, this.sz);
        rectMode(LEFT);
        popMatrix();
        
        this.sz -= 0.01;
        this.trans -= 3;
    };
};
Toaster.prototype.draw = function() {
    if(frameCount % 5 === 0){
        this.particles.push(new this.particle(this.x, this.y + random(this.h)));
    }
    
    for(var i in this.particles){
        this.particles[i].draw();
        if(this.particles[i].trans < 0){
            this.particles.splice(i, 1);
        }
    }
    
    noStroke();
    fill(46, 46, 46);
    rect(this.x, this.y, this.w, this.h, 3);
    fill(255, 255, 255, 30);
    rect(this.x + 2, this.y, this.w / 5, this.h);
    fill(0, 0, 0);
    rect(this.x, this.y, this.w, this.h / 3, 3);
    arc(this.x + 24, this.y, 30, 26, -270, -180);
    fill(240, 40, 40);
    rect(this.xvel + this.x + 9, this.y + 16, 5, 4);
    rect(this.xvel + this.x + 18, this.y + 16, 5, 4);
    
    this.x += this.xvel;
    if(this.x > this.originalX + this.con || this.x < this.originalX - this.con){
        this.xvel = -this.xvel;
    }
};

// Portal
var Portal = function(x, y){
    this.x = x;
    this.y = y;
    this.w = 40;
    this.h = 40;
    
    this.particle = function(x, y){
        this.x = x;
        this.y = y;
        this.x2 = 60;
        this.rot = random(360);
        this.sz = random(10);
        this.trans = 255;
    };
    this.particles = [];
    this.particle.prototype.draw = function() {
        noStroke();
        pushMatrix();
        translate(this.x, this.y);
        rotate(this.rot);
        fill(255, 255, 255, this.trans);
        ellipse(this.x2, 0, this.sz, this.sz);
        popMatrix();
        
        this.x2 -= this.sz/3;
        this.trans -= this.sz;
    };
};
Portal.prototype.draw = function() {
    this.particles.push(new this.particle(this.x + 25, this.y + 25));
    
    for(var i in this.particles){
        this.particles[i].draw();
        if(this.particles[i].trans < 0){
            this.particles.splice(i, 1);
        }
    }
    noFill();
    stroke(255, 255, 255, 100);
    strokeWeight(5);
    ellipse(this.x + 20, this.y + 20, 40, 40);
    noStroke();
    fill(255, 255, 255, 10);
    for(var i = 0; i < 77; i += 5){
        ellipse(this.x + 20, this.y + 20, i, i);
    }
    
    pushMatrix();
    translate(this.x + 20, this.y + 20);
    rotate(frameCount * 5);
    scale(0.6);
    noStroke();
    fill(255, 255, 255, 200);
    ellipse(0, 0, 60, 60);
    for(var i = 0; i < 360; i += 90){
        rotate(i);
        fill(224, 27, 27, 100);
        beginShape();
        vertex(0, 0);
        bezierVertex(-43, -4, -20, -28, -4, -29);
        bezierVertex(-11, -11, -9, -10, 0, 0);
        endShape(CLOSE);
    }
    popMatrix();
};

// [Almost] everything about the blocks (blox)
var block = function(x, y, w, h){
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
};
block.prototype.draw = function() {
    noStroke();
    fill(217, 217, 217);
    quad(this.x, this.y, this.x + this.w, this.y, this.x + this.w - (this.x + this.w === 600 ? 0 : 5), this.y - 4, this.x + (this.x === 0 ? 0 : 5), this.y - 4);
    
    for(var i = 0; i < this.w; i += 20){
        for(var j = 0; j < this.h; j += 20){
            image(j === 0 ? images.snowBlock : images.dirtBlock, this.x + i, this.y + j, 20, 20);
        }
    }
};

var Player = function(x, y, w, h){
    this.x = x; this.originalX = x;
    this.y = y; this.originalY = y;
    this.w = 30;
    this.h = 30;
    
    this.xvel = 0;
    this.yvel = 0;
    this.speed = 5;
    
    this.slow = false;
    this.slowTimer = 0;
    
    this.jumping = false;
    
    this.dir = 'left';
    this.particle = function(x, y, dir){
        this.x = x;
        this.y = y;
        this.dir = dir;
        this.sz = random(10);
        this.trans = 255;
        this.rot = random(10);
    };
    this.particles = [];
    this.particle.prototype.draw = function() {
        noStroke();
        fill(255, 255, 255, this.trans);
        pushMatrix();
        translate(this.x, this.y);
        rotate(frameCount*this.rot);
        ellipse(0, 0, this.sz, this.sz);
        popMatrix();
        
        this.sz -= 0.01;
        this.trans -= 10;
        if(this.dir === 'left'){
            this.x -= this.sz / 2;
        } else {
            this.x += this.sz / 2;
        }
    };
};

var blox = [
    {
        player: new Player(100, 300),
        portal: new Portal(55, 25),
        blox: [
            new block(0, 350, 600, 50),
            new block(0, 290, 100, 20),
            new block(200, 290, 100, 20),
            new block(400, 290, 100, 20),
            new block(100, 230, 100, 20),
            new block(300, 230, 100, 20),
            new block(500, 230, 100, 20),
            new block(400, 160, 100, 20),
            new block(0, 90, 400, 20)
        ],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(55, 25),
        blox: [
            new block(0, 350, 600, 50),
            new block(180, 240, 20, 110),
            new block(280, 200, 20, 150),
            new block(380, 200, 20, 150),
            new block(480, 200, 20, 150),
            new block(0, 290, 100, 20),
            new block(500, 130, 100, 20),
            new block(0, 80, 400, 20)
        ],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(545, 295),
        blox: [
            new block(0, 350, 600, 50),
        ],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(45, 145),
        blox: [
            new block(0, 350, 600, 50),
            new block(0, 200, 400, 120),
            new block(400, 260, 100, 60),
            new block(500, 280, 40, 40),
        ],
        toaster: [new Toaster(180, 170, 180)],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(55, 25),
        blox: [
            new block(0, 350, 600, 50),
            new block(0, 290, 100, 20),
            new block(200, 290, 100, 20),
            new block(400, 290, 100, 20),
            new block(100, 230, 100, 20),
            new block(300, 230, 100, 20),
            new block(500, 230, 100, 20),
            new block(400, 160, 100, 20),
            new block(0, 90, 400, 20)
        ],
        toaster: [new Toaster(35, 265, 35), new Toaster(235, 265, 35), new Toaster(435, 265, 35)],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(500, 115),
        blox: [
            new block(0, 350, 600, 50),
            new block(300, 300, 100, 20),
            new block(200, 265, 100, 20),
            new block(100, 230, 100, 20),
            new block(350, 230, 100, 20),
            new block(460, 175, 100, 20),
        ],
        toaster: [new Toaster(135, 200, 35), new Toaster(235, 235, 35)],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(420, 115),
        blox: [
            new block(0, 350, 600, 50),
            new block(160, 0, 20, 300),
            new block(60, 260, 20, 20),
            new block(140, 280, 20, 20),
            new block(0, 200, 60, 20),
            new block(0, 140, 60, 20),
            new block(100, 90, 60, 20),
        ],
        toaster: [new Toaster(235, 320, 200), new Toaster(275, 320, 200), new Toaster(315, 320, 200), new Toaster(355, 320, 200)],
    },
    {
        player: new Player(550, 10),
        portal: new Portal(500, 115),
        blox: [
            new block(0, 350, 600, 50),
            new block(300, 300, 40, 20),
            new block(250, 280, 40, 20),
            new block(200, 260, 40, 20),
            new block(150, 240, 40, 20),
            new block(100, 220, 40, 20),
            new block(50, 200, 40, 20),
            new block(0, 180, 40, 20),
            new block(50, 130, 40, 20),
            new block(100, 120, 40, 20),
            new block(150, 100, 40, 20),
            new block(200, 80, 40, 20),
            new block(250, 60, 40, 20),
            new block(300, 40, 300, 20),
            new block(450, 230, 40, 20),
        ],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(420, 115),
        blox: [
            new block(0, 350, 600, 50),
            new block(40, 300, 60, 20),
            new block(80, 260, 60, 20),
            new block(120, 220, 60, 20),
            new block(160, 180, 160, 20),
        ],
    },
    {
        player: new Player(100, 320),
        portal: new Portal(500, 115),
        blox: [
            new block(0, 350, 600, 50),
            new block(0, 290, 100, 20),
            new block(500, 290, 100, 20),
            new block(100, 270, 400, 20),
            new block(100, 200, 400, 20),
            new block(481, 200, 20, 90),
        ],
    },
];
var story = "I have to get back to my family.|I haven't seen them for seven hundred and thirty dreadful days.|And now, on the eve of Christmas, I am finally on my way back to my home.|Oh no, it's one of Them. I didn't think They'd be patrolling this far away from the mines.|They're looking for me.|After watching them guard me for two years in the mines, they have no weaknesses that I can see.|What's that candy cane? Maybe it'll be of some use.".split("|");

// [Almost] everything about the player
Player.prototype.applyCollisions = function(xvel, yvel) {
    for (var i = 0; i < blox[level].blox.length; i++) {
        if (!rectCollide(this, blox[level].blox[i])) { continue; }
        if (xvel < 0) {
            this.x = blox[level].blox[i].x + blox[level].blox[i].w;
            this.xvel = 0;
        }
        if (xvel > 0) {
            this.x = blox[level].blox[i].x - this.w;
            this.xvel = 0;
        }
        if (yvel < 0) {
            this.y = blox[level].blox[i].y + blox[level].blox[i].h;
            this.yvel = 0;
        }
        if (yvel > 0) {
            this.y = blox[level].blox[i].y - this.h;
            this.yvel = 0;
            this.jumping = false;
        }
    }
    if (this.y >= 320 && this.yvel > 0) {
        this.jumping = false;
        this.yvel = 0;
        this.y = 320;
    }
};
Player.prototype.draw = function() {
    if(mouseIsPressed){
        this.particles.push(new this.particle(this.x + 5, this.y + random(this.h), this.dir), new this.particle(this.x + 5, this.y + random(this.h), this.dir), new this.particle(this.x + 5, this.y + random(this.h), this.dir));
    }
    
    for(var i in this.particles){
        this.particles[i].draw();
        if(this.particles[i].trans < 0){
            this.particles.splice(i, 1);
        }
    }
    
    // The actual player
    noStroke();
    fill(224, 178, 119);
    (rect)(this.x, this.y, this.w, this.h, 3);
    fill(232, 232, 232);
    (rect)(this.x, this.y, this.w, this.h / 3, 3);
    (rect)(this.x, this.y + 5, 2, 10);
    (rect)(this.x + 28, this.y + 5, 2, 10);
    arc(this.x + 8, this.y, 30, 26, 0, 90);
    fill(46, 46, 46);
    rect(this.xvel + this.x + 9, this.y + 16, 5, 7);
    rect(this.xvel + this.x + 18, this.y + 16, 5, 7);
    
    // Player movement
    if(keys[LEFT]){
        this.dir = 'left';
        this.xvel -= 2;
    }
    if(keys[RIGHT]){
        this.dir = 'right';
        this.xvel += 2;
    }
    if(!keys[LEFT] && !keys[RIGHT]){
        this.xvel = 0;
    }
    
    if (keys[UP] && !this.jumping) {
        this.yvel -= 10;
        this.jumping = true;
    }
    if(this.xvel > this.speed){
        this.xvel = this.speed;
    }
    if(this.xvel < -this.speed){
        this.xvel = -this.speed;
    }
    this.jumping = true;
    this.x += this.xvel;
    this.applyCollisions(this.xvel, 0);
    this.y += this.yvel;
    this.applyCollisions(0, this.yvel);
    this.yvel += 0.6;
    
    if(this.slow){
        this.speed = 1;
        this.slowTimer ++;
    } else {
        this.speed = 5;
    }
    if(this.slowTimer > 160){
        this.slow = false;
        this.slowTimer = 0;
    }
};

keyTyped = function(){
    if(key.toString().toLowerCase() === 'r'){
        blox[level].player.x = blox[level].player.originalX;
        blox[level].player.y = blox[level].player.originalY;
    }
};

draw = function() {
    for(var i in images){
        if (typeof images[i] !== "object") {
            colorMode(RGB, 255);
            background(0, 0, 0, 0);
            images[i] = images[i]();
        }
    }
    
    if(scene === 'Menu'){
        image(images.bg1, 0, 0);
        
        Snows.push(new Snow(), new Snow(), new Snow(), new Snow(), new Snow());
            
        for(var i in Snows){
            Snows[i].draw();
            if(Snows[i].y > 420 || Snows[i].x < -20 || Snows[i].x > 620){
                Snows.splice(i, 1);
                i--;
            }
        }
        
        fill(255, 255, 255);
        textFont(fonts.h1, 60);
        text('f  r  o  s  t', width / 2, height / 2);
        textFont(fonts.h3, 15);
        text('a   c h r i s t m a s   a d v e n t u r e', (width / 2), 40 + height / 2);
        
        noStroke();
        for(var i = -400; i < 0; i += 60){
            fill(255, 255, 255, 7);
            rect(0, 0, 0.5, 0.5, i);
            rect(width, 0, 0.5, 0.5, i);
            fill(0, 0, 0, 15);
            rect(0, height, 0.5, 0.5, i);
            rect(width, height, 0.5, 0.5, i);
        }
        
        if(clicked){
            trans.active = true;
        }
    }
    if(scene === 'Game'){
        image(images.bg1, 0, 0);
        
        Snows.push(new Snow(), new Snow(), new Snow(), new Snow(), new Snow());
            
        for(var i in Snows){
            Snows[i].draw();
            if(Snows[i].y > 420 || Snows[i].x < -20 || Snows[i].x > 620){
                Snows.splice(i, 1);
                i--;
            }
        }
        
        for(var i in blox[level].blox){
            blox[level].blox[i].draw();
        }
        
        if(blox[level].toaster){
            for(var i in blox[level].toaster){
                blox[level].toaster[i].draw();
                if(rectCollide(blox[level].toaster[i], blox[level].player)){
                    blox[level].player.x = blox[level].player.originalX;
                    blox[level].player.y = blox[level].player.originalY;
                }
            }
        }
        
        blox[level].portal.draw();
        blox[level].player.draw();
        
        if(rectCollide(blox[level].player, blox[level].portal)){
            trans.active = true;
        }
        
        
        fill(255, 255, 255);
        textFont(fonts.h3, 14);
        textLeading(14);
        text(story[level], 30, 351, 540, 50);
    }
    
    pushStyle();
    pushMatrix();
    translate(300, 200);
    rectMode(CENTER);
    noStroke();
    fill(255, 255, 255);
    if(!trans.out){
        rotate(90 - trans.rot);
        rect(0, 0, 400 - trans.plusX, 600 - trans.w);
    } else {
        rotate(trans.rot);
        rect(0, 0, trans.plusX, 10 + trans.w);
    }
    popMatrix();
    popStyle();
    
    if(trans.active){
        trans.plusX /= 1.1;
        if(trans.plusX < 100){
            trans.rot /= 1.3;
        }
        if(trans.rot < 1){
            trans.w /= 1.3;
        }
        if(trans.w < 0.1){
            if(trans.type === 'level'){
                level ++;
            } else {
                scene = trans.type;
            }
            trans = { active: true, plusX: 400, rot: 90, w: 590, out: true, type: 'level'};
        }
        if(trans.out && trans.w < 10){
            trans = { active: false, plusX: 400, rot: 90, w: 590, out: false, type: 'level'};
        }
    }
    
    clicked = false;
};
