 /**
 * Monsters University
 * Chester Banks
 * April 12 2017
 * 
 * This is a three-stage game based on the great Disney Pixar movie Monsters University. It's the first game of a series called The Disney Game Medley.
 * 
 * Subscribe to me here! khanacademy.org/cs/sub/4790207744704512
 * Thanks to my subscribers! This program's lucky subscriber is USERNAME! Check out his profile here: khanacademy.org/profile/username
*/

// Settings
textAlign(CENTER, CENTER);
textFont(createFont('Avenir'));

// Vital variables
var scene = 'Logo';
var clicked = false;
var overButton = false;
var trans = {sz: 600, active: false, nextScene: 'characters', out: false}; // ...or objects...
var keys = []; // ...or arrays :P

// Processing functions
mouseClicked = function(){
    clicked = true;
};
var keyPressed = function(){ keys[keyCode] = true; };
var keyReleased = function(){ keys[keyCode] = false; };

// Helpful Graphics Functions
var mu = function(x, y){
    pushMatrix();
    translate(x, y);
    beginShape();
    vertex(-38, -24);
    vertex(-25, -24);
    vertex(-25, -50);
    vertex(-90, -50);
    vertex(-112, -16);
    vertex(-134, -50);
    vertex(-199, -50);
    vertex(-199, -25);
    vertex(-186, -25);
    vertex(-201, 48);
    vertex(-213, 48);
    vertex(-213, 73);
    vertex(-156, 73);
    vertex(-149, 32);
    vertex(-124, 72);
    vertex(-100, 72);
    vertex(-75, 33);
    vertex(-68, 73);
    vertex(-10, 73);
    vertex(-10, 48);
    vertex(-23, 48);
    endShape(CLOSE);
    beginShape();
    vertex(178, -25);
    vertex(178, 51);
    vertex(157, 73);
    vertex(40, 73);
    vertex(18, 52);
    vertex(18, -24);
    vertex(3, -24);
    vertex(3, -49);
    vertex(76, -49);
    vertex(76, -24);
    vertex(62, -24);
    vertex(62, 42);
    vertex(69, 49);
    vertex(128, 49);
    vertex(134, 42);
    vertex(134, -25);
    vertex(120, -25);
    vertex(120, -49);
    vertex(192, -49);
    vertex(192, -25);
    endShape(CLOSE);
    noStroke();
    fill(255);
    bezier(-160, 10, -130, -15, -95, -15, -65, 10);
    bezier(-160, 10, -130, 35, -95, 35, -65, 10);
    fill(0);
    ellipse(-113, 10, 30, 30);
    popMatrix();
};
var Mike = function(x, y, sz, hat, front){
    pushStyle();
    pushMatrix();
    translate(x, y);
    scale(sz / 50);
    // shadow
    noStroke();
    fill(0, 0, 0, 15);
    ellipse(0, 198, 150, 30);
    noFill();
    strokeWeight(15);
    stroke(118, 232, 114);
    // arms
    bezier(-90, 0, -116, -1, -100, 70, -91, 125);
    if(front){
        bezier(90, 0, 116, -1, 134, 37, 155 + sin(frameCount*10)*15, -85);
    } else {
        bezier(90, 0, 116, -1, 100, 70, 91, 125);
    }
    // legs
    line(40, 90, 55, 125);
    line(-40, 90, -55, 125);
    line(40, 175, 55, 125);
    line(-40, 175, -55, 125);
    // toes
    line(-40, 175, -65, 180);
    line(-40, 175, -55, 191);
    line(-40, 175, -36, 190);
    line(40, 175, 65, 180);
    line(40, 175, 55, 191);
    line(40, 175, 36, 190);
    // horns?
    noFill();
    strokeWeight(10);
    stroke(235, 223, 158);
    arc(0, -95, 120, 100, 0, 180);
    arc(0, -95, 120, 50, 0, 180);
    arc(0, -95, 120, 30, 0, 180);
    noStroke();
    fill(118, 232, 114);
    beginShape();
    curveVertex(-80,-40); curveVertex(0,-100); curveVertex(80,-40); curveVertex(85,50); curveVertex(0,100); curveVertex(-85,50); curveVertex(-80,-40); curveVertex(0,-100); curveVertex(80,-40); 
    endShape();
    endShape();
    if(front){
        fill(235);
        beginShape();
        curveVertex(-40,-40); curveVertex(0,-70); curveVertex(40,-40); curveVertex(40,0); curveVertex(0,20); curveVertex(-40,0); curveVertex(-40,-40); curveVertex(0,-70); curveVertex(40,-40);
        endShape();
        fill(45);
        ellipse(0, -15, 50, 50);
        noFill();
        strokeWeight(22);
        stroke(235, 235, 235, 50);
        arc(0, -15, 50, 50, -90, 0);
        strokeWeight(5);
        stroke(0, 0, 0, 50);
        arc(0, 0, 130, 100, 30, 150);
        arc(-62, 3, 20, 40, 50, 110);
        arc(62, 3, 20, 40, 80, 140);
        strokeWeight(2);
        stroke(0, 0, 0, 30);
        arc(0, 15, 90, 95, 60, 120);
    }
    // hat
    if(hat){
        noStroke();
        fill(61, 95, 158);
        arc(0, -85, 90, 90, -180, 0);
        textFont(createFont('Courier Bold'), 25);
        textAlign(CENTER, CENTER);
        fill(255);
        for(var i = 0; i < 360; i += 50){
            text('MU', sin(i)*3, -112 + cos(i)*3);
        }
        textSize(25);
        fill(0, 174, 255);
        text('MU', 0, -112);
        fill(22, 65, 145);
        arc(11, -85, 90, 37, -180, 0);
        arc(3, -85, 100, 11, -180, 0);
    }
    popMatrix();
    popStyle();
};
var text2 = function(txt, x, y){
    fill(40, 132, 212);
    for(var i = 0; i < 360; i += 30){
        text(txt, x + sin(i)*8, y + cos(i)*8);
    }
    fill(255);
    for(var i = 0; i < 360; i += 30){
        text(txt, x + sin(i)*3, y + cos(i)*3);
    }
    fill(40, 132, 212);
    text(txt, x, y);
};

// Collision functions
var circleCollide = function(object1, object2){
    return (dist(object1.x, object1.y, object2.x, object2.y) <= (object1.sz / 2) + (object2.sz / 2));
};
var rectCollide = function(one, two){
    if( one.x+one.w > two.x &&
        one.y+one.h > two.y &&
        one.x < two.x+two.w &&
        one.y < two.y+two.h){
        return true;
    }
};

// Buttons
var button = function(x, y, sz, txt, next){
    this.x = x; 
    this.y = y;
    this.sz = sz; 
    this.txt = txt;
    this.next = next;
    this.y2 = 10;
};
button.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 10);
    for(var i = 0; i < 360; i += 30){
        ellipse(this.x + sin(i)*5, 10 - this.y2 + this.y + cos(i)*5, this.sz * 1.15, this.sz * 1.15);
    }
    
    textSize(this.sz / 1.5);
    if(dist(mouseX, mouseY, this.x, this.y) < this.sz/2){
        this.y2 /= 1.1;
        
        fill(50, 129, 194);
        ellipse(this.x, this.y, this.sz * 1.15, this.sz * 1.15);
        noFill();
        strokeWeight(5);
        stroke(255, 255, 255);
        ellipse(this.x, this.y, this.sz, this.sz);
        overButton = true;
        if(clicked){
            trans.active = true;
            trans.nextScene = this.next;
        }
    } else {
        if(this.y2 < 10){
            this.y2 += 1;
        }
        noStroke();
        fill(40, 132, 212);
        ellipse(this.x, this.y, this.sz * 1.15, this.sz * 1.15);
        noFill();
        strokeWeight(5);
        stroke(255, 255, 255);
        ellipse(this.x, this.y, this.sz, this.sz);
    }
    fill(255);
    if(this.txt === '.'){
        noStroke();
        fill(255);
        if(this.sz < 100){
            triangle(this.x + 20, this.y, this.x - 15, this.y - 20, this.x - 15, this.y + 20);
        } else {
            triangle(this.x + 30, this.y, this.x - 22, this.y - 30, this.x - 22, this.y + 30);
        }
    } else if (this.txt === '-'){
        strokeCap(SQUARE);
        stroke(255);
        strokeWeight(5);
        line(this.x - 15, this.y - 10, this.x + 15, this.y - 10);
        line(this.x - 15, this.y, this.x + 15, this.y);
        line(this.x - 15, this.y + 10, this.x + 15, this.y + 10);
    } else if (this.txt === '#'){
        strokeCap(SQUARE);
        stroke(255);
        strokeWeight(5);
        noFill();
        arc(this.x, this.y, this.sz / 2, this.sz / 2, -160, 130);
        noStroke();
        fill(255);
        triangle(this.x - 10, this.y + 13, this.x - 20, this.y + 24, this.x - 27, this.y + 6);
    } else {
        text(this.txt.toUpperCase(), this.x, this.y);
    }
};
var buttons = {
    play: new button(300, 450, 130, '.', 'How1'),
    how: new button(140, 450, 90, '?', 'How'),
    about: new button(460, 450, 90, '-', 'About'),
    back: new button(80, 520, 90, '<', 'Menu'),
    start: new button(510, 515, 95, '.', 'Game1'),
    start2: new button(510, 515, 95, '.', 'Game2'),
    start3: new button(510, 515, 95, '.', 'Card'),
    choose: new button(510, 515, 95, '.', 'Choose'),
    start4: new button(510, 515, 95, '.', 'Game3'),
    restart1: new button(510, 515, 95, '#', 'Game1'),
    restart2: new button(510, 515, 95, '#', 'Game2'),
    restart3: new button(510, 515, 95, '#', 'Game3'),
};

// Pre-defined variables
var player;

// Game objects
var Urchin = function(x, y){
    this.x = x;
    this.y = y;
    this.originalY = y;
    this.sz = 30;
    
    this.i = random(255);
    
    this.points = [];
    for(var i = 0; i < 360; i += 30){
        this.points.push({x: random(-5, 5) + sin(i) * 10, y: random(-5, 5) + cos(i) * 10});
    }
};
Urchin.prototype.draw = function() {
    pushMatrix();
    translate(this.x + 15, this.y + 15);
    fill(255, 0, 0, sin(this.i + frameCount * 5)*30);
    noStroke();
    for(var i = 50; i > 0; i -= 5){
        ellipse(0, 0, i, i);
    }
    beginShape();
    strokeWeight(3);
    stroke(204, 51, 51, sin(this.i + frameCount * 5)*255);
    fill(255, 0, 0, sin(this.i + frameCount * 5)*255);
    for(var i in this.points){
        vertex(this.points[i].x, this.points[i].y);
    }
    endShape(CLOSE);
    popMatrix();
    
    if(keys[UP]){
        this.y += player.speed;
    }
    if(keys[DOWN]){
        this.y -= player.speed;
    }
};
var Urchins = [];
for(var i = 0; i < 80; i ++){
    Urchins.push(new Urchin(random(width), random(-1500, 500)));
}

var Block = function(x, y){
    this.x = x; this.y = y;
    this.w = 40; this.h = 40;
    
    this.type = floor(random(4));
};
Block.prototype.draw = function() {
    rectMode(CORNER);
    noStroke();
    pushMatrix();
    translate(this.x, this.y);
    if(this.type === 0){
        fill(128, 24, 24);
        rect(0, 10, this.w, this.h);
        fill(176, 37, 37);
        rect(0, 0, this.w, this.h);
        fill(112, 28, 28);
        rect(0, 0, this.w / 2.2, this.h / 5);
        rect(22, 0, this.w / 2.2, this.h / 5);
        rect(6, 11, this.w / 1.5, this.h / 5);
        rect(0, 22, this.w / 2.2, this.h / 5);
        rect(22, 22, this.w / 2.2, this.h / 5);
        rect(6, 33, this.w / 1.5, this.h / 6);
    }
    if(this.type === 1){
        fill(222, 222, 82);
        rect(0, 0, this.w, this.h, 50);
        fill(82, 164, 222);
        rect(0, this.h / 2.5, this.w, this.h / 4);
        ellipse(this.w / 2, this.h / 1.5, this.w, this.h / 4);
        fill(222, 222, 82);
        ellipse(this.w / 2, this.h / 2.5, this.w, this.h / 4);
    }
    if(this.type === 2){
        fill(110, 110, 110);
        rect(0, 10, this.w, this.h);
        fill(173, 173, 173);
        rect(0, 0, this.w, this.h);
        fill(105, 105, 105);
        rect(0, 0, this.w / 2.2, this.h / 5);
        rect(22, 0, this.w / 2.2, this.h / 5);
        rect(6, 11, this.w / 1.5, this.h / 5);
        rect(0, 22, this.w / 2.2, this.h / 5);
        rect(22, 22, this.w / 2.2, this.h / 5);
        rect(6, 33, this.w / 1.5, this.h / 6);
    }
    if(this.type === 3){
        fill(186, 186, 186);
        rect(0, 10, this.w, this.h);
        fill(214, 214, 214);
        rect(0, 0, this.w, this.h);
        fill(196, 85, 85);
        rect(0, 0, this.w / 2.2, this.h / 5);
        rect(22, 0, this.w / 2.2, this.h / 5);
        rect(6, 11, this.w / 1.5, this.h / 5);
        rect(0, 22, this.w / 2.2, this.h / 5);
        rect(22, 22, this.w / 2.2, this.h / 5);
        rect(6, 33, this.w / 1.5, this.h / 6);
    }
    popMatrix();
};
var blockMap = [
    '...............',
    '.             .',
    '. ..  ....     ',
    '.  . .   . .  .',
    '.   .  .. . ...',
    '..     .     ..',
    '.   .......  ..',
    '.      .     ..',
    '. .    .. .  ...',
    '. .           .',
    '. .           .',
    '.    ........ .',
    '. ....        .',
    '.             .',
    '...............',
];
var blocks = [];
var loadMap = function(which){
    for(var i in which){
        for(var j in which[i]){
            if(which[i][j] === '.'){
                blocks.push(new Block(j * 40, i * 40));
            }
        }
    }
};
loadMap(blockMap);

var Toy = function(){
    this.xs = [random(0, 200), random(400, 600)];
    this.y = random(200, 600);
    if(this.y < 450){
        this.x = random(600);
    } else {
        this.x = this.xs[floor(random(this.xs.length))];
    }
    this.sz = 30;
    this.r = random(-30, 30);
    
    this.type = floor(random(3));
};
Toy.prototype.draw = function() {
    pushStyle();
    rectMode(CENTER);
    pushMatrix();
    translate(this.x, this.y);
    rotate(this.r);
    noStroke();
    switch(this.type){
        case 0:
            fill(207, 219, 37);
            ellipse(0, 0, this.sz, this.sz);
            fill(37, 133, 217);
            rect(0, 0, this.sz, this.sz / 4);
            ellipse(0, 5, this.sz, this.sz/ 5);
            fill(207, 219, 37);
            ellipse(0, -3, this.sz, this.sz/ 5);
        break;
        case 1:
            fill(181, 34, 34);
            rect(0, 5, this.sz, this.sz);
            fill(214, 51, 51);
            rect(0, 0, this.sz, this.sz);
            fill(181, 34, 34);
            rect(-6, -5, this.sz / 3, this.sz / 3, 5);
            rect(6, -5, this.sz / 3, this.sz / 3, 5);
            rect(6, 7, this.sz / 3, this.sz / 3, 5);
            rect(-6, 7, this.sz / 3, this.sz / 3, 5);
            fill(214, 51, 51);
            rect(-6, -8, this.sz / 4, this.sz / 3, 5);
            rect(6, -8, this.sz / 4, this.sz / 3, 5);
            rect(6, 4, this.sz / 4, this.sz / 3, 5);
            rect(-6, 4, this.sz / 4, this.sz / 3, 5);
        break;
        case 2:
            fill(133, 133, 133);
            for(var i = 0; i < 360; i += 90){
                pushMatrix();
                rotate(i);
                triangle(-5, 0, 5, 0, 0, -15);
                ellipse(0, -15, 5, 5);
                popMatrix();
            }
        break;
    }
    popMatrix();
    popStyle();
};
var Toys = [];
for(var i = 0; i < 20; i ++){
    Toys.push(new Toy());
}

var Player = function(){
    this.x = 300;
    this.y = 550;
    this.sz = 30;
    this.speed = 5;
};
Player.prototype.draw = function() {
    Mike(this.x, this.y, 7, false, false);
    
    if(keys[RIGHT] && this.x < width - (this.sz / 2)){
        this.x += this.speed;
    }
    if(keys[LEFT] && this.x > (this.sz / 2)){
        this.x -= this.speed;
    }
    
    for(var i = 0; i < Urchins.length; ++i){
        if(circleCollide(Urchins[i], this)){
            this.speed /= 1.5;
            Urchins.splice(i, 1);
        }
    }
};
player = new Player();

var Player2 = function(type){
    this.x = 300; this.xvel = 0;
    this.y = 500; this.yvel = 0;
    this.w = 30;
    this.h = 30;
    this.type = type;
    this.sz = this.type === 2 ? 30 : 60;
};
Player2.prototype.draw = function() {
    Mike(this.x + 15, this.y, this.sz/4.29, false, false);
    
    this.xvel = constrain(this.xvel, -3, 3);
    this.yvel = constrain(this.yvel, -3, 3);
    
    if(keys[LEFT]){
        this.xvel -= 0.5;
    }
    if(keys[RIGHT]){
        this.xvel += 0.5;
    }
    if(keys[UP]){
        this.yvel -= 0.5;
    }
    if(keys[DOWN]){
        this.yvel += 0.5;
    }
    
    if(!keys[LEFT] && !keys[RIGHT]){ 
        this.xvel /= 1.05; 
    }
    if(!keys[UP] && !keys[DOWN]){ 
        this.yvel /= 1.05; 
    }
    if(this.xvel > -0.1 && this.xvel < 0.1){ 
        this.xvel = 0; 
    }
    if(this.yvel > -0.1 && this.yvel < 0.1){ 
        this.yvel = 0; 
    }
    
    this.x += this.xvel;
    if(this.type === 2){
        for(var i = 0; i < blocks.length; i ++){
            if(rectCollide(this, blocks[i])){
                if(this.xvel < 0){
                    this.xvel = 0;
                    this.x = blocks[i].x + blocks[i].w;
                }
                if(this.xvel > 0){
                    this.xvel = 0;
                    this.x = blocks[i].x - this.w;
                }
            }
        }
    }
    
    this.y += this.yvel;
    
    if(this.type === 2){
        for(var i in blocks){
            if(rectCollide(this, blocks[i])){
                if(this.yvel < 0){
                    this.yvel = 0;
                    this.y = blocks[i].y + blocks[i].h;
                }
                if(this.yvel > 0){
                    this.yvel = 0;
                    this.y = blocks[i].y - this.h;
                }
            }
        }
    }
};
var player2 = new Player2(2);
var player3 = new Player2(3);

// Logo
var Logo = function(){
    this.s  = 500;
    this.s2 = 1;
    this.s3 = 300;
    this.trans = 255;
};
Logo.prototype.draw = function(){
    background(26, 26, 26);
    
    pushMatrix();
    translate(300, 280);
    scale(1 - this.s2, 1 - this.s2/1.5);
    rotate(this.s2 * 360);
    noFill();
    
    stroke(214, 214, 214);
    
    // D
    strokeWeight(12);
    line(-145, -60, -145, 27);
    strokeWeight(5);
    bezier(-179, -8, -220, -20, -95, -51, -94, -17);
    bezier(-179, -8, -220, -22, -95, -42, -97, -17);
    bezier(-179, -8, -220, -22, -95, -39, -95, -12);
    bezier(-186, -15, -110, 85, 9, -19, -101, -76);
    bezier(-186, -15, -110, 84, -2, -19, -101, -76);
    bezier(-186, -15, -110, 77, -11, -18, -101, -76);
    bezier(-203, -97, -187, -104, -138, -101, -101, -76);
    
    // I
    strokeWeight(12);
    line(-35, -34, -35, 11);
    strokeWeight(5);
    bezier(-18, -86, -93, -25, 39, -75, -16, -87);
    bezier(-18, -86, -93, -25, 34, -63, -16, -87);
    bezier(-27, -88, -53, -92, -53, -60, -47, -61);
    bezier(-32, -85, -53, -86, -53, -51, -47, -61);
    bezier(-18, -86, -39, -80, -45, -58, -46, -54);
    
    // S
    strokeWeight(6);
    bezier(29, -37, -70, -23, 22, -23, 17, -17);
    bezier(34, -34, -70, -23, 22, -23, 17, -17);
    bezier(30, -32, -78, -22, 22, -21, 17, -17);
    bezier(-4, 4, 5, 11, 51, 0, 17, -18);
    bezier(-4, 8, 5, 14, 51, 10, 17, -18);
    bezier(-4, 8, 5, 14, 51, 10, 17, -18);
    bezier(-4, 4, 0, 13, -42, -16, 10, -6);
    bezier(-4, 7, 0, 13, -42, -16, 10, -6);
    bezier(-7, 3, 13, 13, -42, -16, 10, -3);
    
    // N
    strokeWeight(3);
    bezier(50, -35, 45, -21, 40, 8, 44, 14);
    bezier(53, -35, 47, -21, 52, 8, 48, 14);
    bezier(53, -35, 51, -21, 75, 8, 77, 9);
    bezier(53, -35, 67, -21, 93, 17, 77, 9);
    bezier(76, -47, 86, -30, 93, -5, 82, 9);
    bezier(73, -49, 80, -30, 84, -5, 76, -3);
    strokeWeight(6);
    bezier(50, -34, 47, -21, 46, 8, 46, 13);
    bezier(52, -21, 67, -21, 79, 17, 78, 4);
    bezier(53, -26, 48, -49, 85, 17, 74, 2);
    bezier(78, -40, 80, -30, 84, -5, 80, -3);
    bezier(77, -40, 86, -30, 88, -5, 83, 2);
    
    // E
    strokeWeight(3);
    bezier(97, -38, 108, -35, 137, -52, 141, -35);
    bezier(99, -33, 108, -31, 137, -26, 141, -35);
    bezier(99, -33, 95, -34, 97, -34, 97, -38);
    bezier(132, 3, 123, 19, 97, 22, 97, 9);
    bezier(130, 1, 123, 2, 97, 6, 97, 10);
    bezier(105, -29, 94, 2, 94, 6, 97, 9);
    strokeWeight(7);
    bezier(97, -35, 124, -35, 137, -44, 135, -35);
    bezier(103, -35, 108, -37, 135, -31, 136, -35);
    bezier(127, 4, 123, 2, 97, 15, 103, 11);
    bezier(127, 4, 123, 14, 97, 15, 103, 11);
    strokeWeight(10);
    line(101, -13, 129, -15);
    bezier(111, -29, 98, 2, 100, 6, 107, 9);
    
    // Y
    strokeWeight(3);
    bezier(161, -38, 109, 27, 204, 31, 196, -28);
    bezier(161, -38, 125, 19, 204, 17, 193, -28);
    bezier(192, -28, 170, -25, 153, 17, 146, 63);
    bezier(188, -37, 158, -25, 141, 17, 136, 55);
    strokeWeight(5);
    bezier(145, 63, 149, 75, 131, 53, 136, 57);
    strokeWeight(6);
    bezier(151, -20, 133, 20, 199, 27, 196, -28);
    bezier(151, -20, 133, 13, 199, 27, 196, -28);
    strokeWeight(7);
    bezier(191, -33, 161, -25, 147, 17, 140, 55);
    bezier(194, -33, 166, -25, 147, 17, 143, 60);
    
    // Slash
    strokeWeight(3);
    bezier(-121, 84, -75, 48, -19, 17, 191, 37);
    bezier(-111, 101, -88, 68, -19, 29, 191, 37);
    strokeWeight(10);
    bezier(-114, 93, -88, 68, -19, 29, 139, 35);
    bezier(-114, 85, -88, 68, -50, 29, 139, 35);
    strokeWeight(22);
    point(-115, 92);
    
    // Game medley
    textSize(44);
    fill(214);
    text('game medley', 57, 75);
    
    popMatrix();
    textSize(15);
    text('M A D E   A S   P A R T   O F   C H E S T E R   B A N K S \'', 300 - this.s, 113);
    
    pushMatrix();
    translate(300, 400);
    translate(0, this.s3);
    stroke(235);
    strokeWeight(10);
    noFill();
    arc(-230, 90, 200, 200, -245, 30);
    arc(100, 145, 200, 200, -200, 30);
    arc(-130, 388, 500, 500, -91, -57);
    arc(-130, 388, 500, 500, -131, -125);
    popMatrix();
    
    rectMode(CORNER);
    noStroke();
    fill(25, 25, 25, 255 - this.trans);
    rect(0, 0, width, height);
    
    this.s /= 1.1;
    if(this.s < 10){
        this.s2 /= 1.1;
    }
    if(this.s2 < 0.1){
        this.s3 /= 1.1;
    }
    if(this.s3 < 0.1){
        this.trans /= 1.3;
    }
    if(this.trans < 0.1){
        scene = 'Menu';
    }
};
var logo = new Logo();

// Menu
var Menu = function(){
    this.y1 = 300;
    this.y2 = 400;
};
Menu.prototype.draw = function() {
    background(26);
    noFill();
    strokeWeight(15);
    stroke(40, 132, 212);
    mu(15 + width / 2, (height / 3) - this.y1);
    strokeWeight(5);
    stroke(255);
    fill(40, 132, 212);
    mu(15 + width / 2, (height / 3) - this.y1);
    
    rectMode(CENTER);
    noStroke();
    fill(40, 132, 212);
    rect(300, 320 - this.y2, 420, 70);
    noFill();
    stroke(255);
    rect(300, 320 - this.y2, 400, 50);
    fill(255);
    textSize(27);
    text('T H E   S C A R E   G A M E S', 300, 320 - this.y2);
    
    pushMatrix();
    translate(0, this.y2);
    buttons.play.draw();
    buttons.how.draw();
    buttons.about.draw();
    popMatrix();
    
    this.y1 /= 1.1;
    if(this.y1 < 50){
        this.y2 /= 1.1;
    }
};
var menu = new Menu();

// Game #1 (Toxicity Challenge)
var Game1 = function(){
    this.time = 20;
    this.finishY = -1500;
};
Game1.prototype.draw = function() {
    background(0);
    for(var i = 0; i < Urchins.length; ++i){
        Urchins[i].draw();
    }
    player.draw();
    
    textSize(50);
    fill(255, 0, 0);
    text(this.time, 550, 40);
    
    noStroke();
    fill(255);
    for(var i = -40; i < width; i += 20){
        for(var j = 0; j < 30; j += 10){
            rect(i + ((j/20)%2)*20, j + this.finishY, 10, 10);
        }
    }
    
    if(frameCount % 40 === 0){
        this.time --;
    }
    if(keys[UP]){
        this.finishY += player.speed;
    }
    if(keys[DOWN]){
        this.finishY -= player.speed;
    }
    
    if(this.time < 0){
        trans.nextScene = 'Lose1';
        trans.active = true;
    }
    
    if(this.finishY > 500){
        trans.nextScene = 'How2';
        trans.active = true;
    }
};
var game1 = new Game1();

// Game #2 (Hide and Sneak)
var Game2 = function(){
    this.light = {x: 0, y: 0, sz: 150};
    this.y2 = 0;
};
Game2.prototype.draw = function() {
    background(22, 41, 54);
    
    for(var i = 0; i < blocks.length; ++i){
        blocks[i].draw();
    }
    
    noStroke();
    fill(255, 255, 0, 15);
    noFill();
    stroke(0);
    strokeWeight(731);
    ellipse(this.light.x, this.light.y, 940, 940);
    strokeWeight(10.3);
    for(var i = 200; i > 0; i -= 20){
        stroke(0, 0, 0, i*1.5);
        ellipse(this.light.x, this.light.y,  i, i);
    }
    
    if(circleCollide(this.light, player2)){
        trans.active = true;
        trans.nextScene = 'Lose2';
    }
    
    player2.draw();
    
    this.light.x = 300 + sin(frameCount)*300;
    this.light.y = this.y2 + sin(frameCount)*10;
    
    this.y2 ++;
    if(this.y2 > 550){ this.y2 = -50; }
    
    if(player2.x > 600){
        trans.active = true;
        trans.nextScene = 'How3';
    }
};
var game2 = new Game2();

var locations = ['Kansas', 'California', 'Tokyo', 'New York City', 'London', 'Iowa', 'Maine', 'Florida', 'Alabama', 'Connecticut', 'Moscow'], enjoys = ['Drawing', 'Hiking', 'Biking', 'Coding', 'Reading', 'Painting', 'Soccer', 'Baseball', 'Basketball', 'Football', 'Writing', 'Music'], fears = ['Thunder', 'Snakes', 'Spiders', 'Zombies'], first = ['Griffin', 'Nolan', 'Andrew', 'Isaac', 'Isaiah', 'Jaxon', 'Jack', 'Legolas', 'Asher', 'Blaze', 'Jake', 'Noah', 'Jacob', 'Gavin', 'Caden', 'Chester', 'Seth'], last = ['Jones', 'Adams', 'Owensby', 'Banks', 'Moffitt', 'Gustoff', 'Blomquist', 'King', 'Trump', 'Allen', 'Whittaker', 'Blackgaard', 'Meltsner', 'Kendall', 'Rathbone'], hairs = [color(115, 54, 25), color(31, 31, 31), color(231, 240, 163), color(201, 109, 60)];
var kid = {
    loc: locations[floor(random(locations.length))],
    fname: first[floor(random(first.length))],
    lname: last[floor(random(last.length))],
    fear: fears[floor(random(fears.length))],
    enjoy: enjoys[floor(random(enjoys.length))],
    age: floor(random(4, 10)),
    hair: hairs[floor(random(hairs.length))],
};
var approaches = [
    { name: 'The Slither', selected: false },
    { name: 'The Creep', selected: false },
    { name: 'The Zombie Walk', selected: false },
    { name: 'The Rush', selected: false },
];
var roars = [
    { name: 'The Creepy Purr', selected: false },
    { name: 'The Hiss', selected: false },
    { name: 'The Undead Roar', selected: false },
    { name: 'The All-out Roar', selected: false },
];
var approach = null;
var roar = null;

// Game #3 (Simulated Scare)
var Game3 = function(){
    this.light = {x: 0, y: 0, sz: 150};
    this.y2 = 0;
};
Game3.prototype.draw = function() {
    background(22, 41, 54);
    
    for(var i = 0; i < Toys.length; i ++){
        Toys[i].draw();
    }
    
    pushStyle();
    rectMode(CENTER);
    translate(300, 150);
    noStroke();
    fill(89, 51, 20);
    rect(0, 11, 110, 210, 10);
    ellipse(-50, 109, 20, 20);
    ellipse(50, 109, 20, 20);
    ellipse(-50, -91, 20, 20);
    ellipse(50, -91, 20, 20);
    fill(112, 62, 21);
    rect(0, 0, 110, 210, 10);
    ellipse(-50, -100, 20, 20);
    ellipse(50, -100, 20, 20);
    ellipse(-50, 100, 20, 20);
    ellipse(50, 100, 20, 20);
    fill(250, 246, 205);
    rect(0, 0, 100, 200, 10);
    fill(220, 228, 247);
    rect(0, -80, 72, 45, 10);
    
    noStroke();
    pushMatrix();
    scale(0.4);
    translate(0, -118);
    fill(81, 216, 237);
    arc(0, -6, 150, 40, -180, 0);
    fill(237, 188, 128);
    ellipse(0, -80, 100, 120);
    fill(kid.hair);
    ellipse(-20, -83, 20, 5);
    ellipse(20, -83, 20, 5);
    arc(0, -103, 93, 80, -180, 0);
    arc(12, -104, 93, 22, 0, 180);
    noFill();
    stroke(26);
    strokeWeight(2);
    arc(0, -34, 30, 20, -164, -36);
    arc(-20, -65, 20, 20, 0, 180);
    arc(20, -65, 20, 20, 0, 180);
    popMatrix();
    
    noStroke();
    fill(64, 154, 222);
    rect(0, 25, 100, 150, 10);
    fill(0, 0, 0, 30);
    rect(0, -43, 100, 15);
    
    textFont(createFont('Georgia Bold'));
    fill(0, 0, 0, 50);
    textSize(80);
    text(kid.fname.substring(0, 1), 0, 20);
    noStroke();
    fill(255, 255, 255, 15);
    for(var i = 0; i < 103; i += 10){
        rect(140, 0, i, i * 1.5, 5);
        rect(-140, 0, i, i * 1.5, 5);
    }
    textFont(createFont('Avenir'), 20);
    fill(255, 255, 255, 100);
    text('SCARE\nZONE', -140, 0);
    text('SCARE\nZONE', 140, 0);
    popStyle();
    
    player3.draw();
};
var game3 = new Game3();

draw = function() {
    // Draw them scenes
    if(scene === 'Logo'){
        logo.draw();
    }
    if(scene === 'Menu'){
        menu.draw();
    }
    if(scene === 'How'){
        background(25);
        
        textSize(100);
        fill(40, 132, 212);
        for(var i = 0; i < 360; i += 30){
            text('HOW', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('HOW', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('HOW', 300, 100);
        
        textSize(25);
        fill(255);
        text('This is a completely useless instructions page, because the instructions are explained in the game!', 50, 50, 500, 500);
        
        buttons.back.draw();
    }
    if(scene === 'About'){
        background(25);
        
        textSize(100);
        fill(40, 132, 212);
        for(var i = 0; i < 360; i += 30){
            text('ABOUT', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('ABOUT', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('ABOUT', 300, 100);
        
        textSize(20);
        fill(255);
        text('You\'ve wanted to be a scarer your whole life, and go to Monsters University to become one. But you get in a rivalry with the hotshot Jimmy Sullivan, and it ruins the end of year exam. You fail the scaring class!\n\nNow the only way for you to fulfill your dream of being a scarer is to win the Scare Games, a competition against other college teams. If you win, you get let back in the scaring class. But if you lose, you get expelled from Monsters University!', 50, 60, 500, 500);
        
        buttons.back.draw();
    }
    
    if(scene === 'How1'){
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('R O U N D   O N E', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('TOXICITY CHALLENGE', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('TOXICITY CHALLENGE', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('TOXICITY CHALLENGE', 300, 100);
        
        textSize(15);
        fill(255);
        pushStyle();
        textFont(createFont('Avenir Italic'));
        text('"A child\'s room is where you scare, but avoid the toxicity lurking there."', 300, 150);
        popStyle();
        textSize(23);
        text('In the first event of The Scare Games, you have to use the arrow keys to dash through a sewer tunnel in the dark in less than 30 seconds.\n\nRed and toxic, the stinging glow urchins will significantly slow you down. Avoid them at all costs!', 50, 50, 500, 500);
        
        textSize(15);
        text('YOU PLAY AS:', 360, 474);
        textSize(50);
        text('MIKE', 360, 500);
        Mike(240, 480, 20, true, true);
        
        buttons.start.draw();
    }
    if(scene === 'Game1'){
        game1.draw();
    }
    if(scene === 'How2'){
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('R O U N D   T W O', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('HIDE AND SNEAK', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('HIDE AND SNEAK', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('HIDE AND SNEAK', 300, 100);
        
        textSize(15);
        fill(255);
        pushStyle();
        textFont(createFont('Avenir Italic'));
        text('"Someone is coming, this could ruin your night; stay hidden, take cover,\nand stay out of sight."', 300, 150);
        popStyle();
        textSize(23);
        text('The second event of The Scare Games is Hide and Sneak. In this event, you must avoid the referee\'s flashlight, find the door on the wall, and escape out of the ΣΚΘ house.\n\nDon\'t get found - remember, your scaring career is on the line!', 50, 50, 500, 500);
        
        textSize(15);
        text('YOU PLAY AS:', 360, 474);
        textSize(50);
        text('ART', 360, 500);
        
        buttons.start2.draw();
    }
    if(scene === 'Game2'){
        game2.draw();
    }
    if(scene === 'How3'){
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('F I N A L   R O U N D', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('SIMULATED SCARE', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('SIMULATED SCARE', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('SIMULATED SCARE', 300, 100);
        
        textSize(15);
        fill(255);
        pushStyle();
        textFont(createFont('Avenir Italic'));
        text('"Every one of your skills will be put to the test. The Scare Simulator will\nprove who\'s the best."', 300, 150);
        popStyle();
        textSize(19);
        text('You\'ve made it to the final event of the Scare Games. In this event, you will look at the info of the child you are supposed to scare, and then enter his or her bedroom.\n\nOnce in the room, you need to make it to the bed (using the arrow keys) without stepping on any toys, and then choose the right roar based on the info you read earlier.', 50, 50, 500, 500);
        
        textSize(15);
        text('YOU PLAY AS:', 360, 474);
        textSize(50);
        text('SULLEY', 360, 500);
        
        buttons.start3.draw();
    }
    if(scene === 'Card'){
        background(26);
        pushStyle();
        pushMatrix();
        rectMode(CENTER);
        translate(width / 2, height / 2);
        rotate(10);
        
        stroke(218, 219, 184);
        strokeWeight(10);
        fill(253, 255, 209);
        rect(0, 0, 300, 400, 20);
        strokeWeight(2);
        fill(71, 71, 71);
        rect(0, -90, 250, 170);
        
        noStroke();
        fill(81, 216, 237);
        arc(0, -6, 150, 40, -180, 0);
        fill(237, 188, 128);
        ellipse(0, -80, 100, 120);
        fill(25);
        ellipse(-20, -65, 20, 20);
        ellipse(20, -65, 20, 20);
        fill(kid.hair);
        ellipse(-20, -83, 20, 5);
        ellipse(20, -83, 20, 5);
        arc(0, -103, 93, 80, -180, 0);
        arc(12, -104, 93, 22, 0, 180);
        noFill();
        stroke(26);
        strokeWeight(2);
        arc(0, -45, 30, 20, 49, 180);
        
        textAlign(LEFT, TOP);
        textSize(22);
        fill(0, 0, 0, 150);
        text('Name: ' + kid.fname + ' ' + kid.lname + '\nAge: ' + kid.age + '\nLocation: ' + kid.loc + '\nEnjoys: ' + kid.enjoy + '\nBiggest fear: ' + kid.fear, -120, 0, 250, 350);
        popMatrix();
        popStyle();
        
        buttons.choose.draw();
    }
    if(scene === 'Choose'){
        background(26);
        
        textSize(40);
        text2('Select your approach & roar.', 300, 80);
        
        for(var i = 0; i < approaches.length; i ++){
            approaches[i].x = 300;
            approaches[i].y = 150 + i * 50;
            
            pushMatrix();
            pushStyle();
            rectMode(CENTER);
            translate(approaches[i].x, approaches[i].y);
            fill(40, 132, 212);
            if(mouseX > approaches[i].x - 200 && mouseX < approaches[i].x + 200 && mouseY > approaches[i].y - 20 && mouseY < approaches[i].y + 20){
                fill(32, 97, 150);
                overButton = true;
                if(clicked){
                    approach = i;
                }
            }
            if(approach === i){
                fill(255, 255, 255);
            }
            noStroke();
            rect(0, 0, 400, 40, 10);
            fill(255);
            if(approach === i){
                fill(40, 132, 212);
            }
            textSize(15);
            text(approaches[i].name, 0, 0);
            popStyle();
            popMatrix();
        }
        
        for(var i = 0; i < approaches.length; i ++){
            roars[i].x = 300;
            roars[i].y = 390 + i * 50;
            
            pushMatrix();
            pushStyle();
            rectMode(CENTER);
            translate(roars[i].x, roars[i].y);
            fill(40, 132, 212);
            if(mouseX > roars[i].x - 200 && mouseX < roars[i].x + 200 && mouseY > roars[i].y - 20 && mouseY < roars[i].y + 20){
                fill(32, 97, 150);
                overButton = true;
                if(clicked){
                   roar = i;
                }
            }
            if(roar === i){
                fill(255, 255, 255);
            }
            noStroke();
            rect(0, 0, 400, 40, 10);
            fill(255);
            if(roar === i){
                fill(40, 132, 212);
            }
            textSize(15);
            text(roars[i].name, 0, 0);
            popStyle();
            popMatrix();
            
            pushMatrix();
            translate(70, 225);
            rotate(-90);
            textSize(18);
            fill(255);
            text('A P P R O A C H E S', 0, 0);
            text('R O A R S', -240, 0);
            popMatrix();
        }
        
        buttons.start4.draw(); 
    }
    if(scene === 'Game3'){
        game3.draw();
    }
    
    if(scene === 'Lose1'){
        player.x = 300;
        player.speed = 5;
        game1.time = 20;
        game1.finishY = -1500;
        for(var i = 0; i < Urchins.length; i ++){
            if(Urchins[i].y !== Urchins[i].originalY){
                Urchins[i].y = Urchins[i].originalY;
            }
        }
        
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('T R A G E D Y', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('YOU LOST :(', 300, 100);
        
        textSize(15);
        fill(255);
        textSize(23);
        text('Oh no! You\'ve been eliminated from the Scare Games! Now you will be expelled from Monsters University. You\'ll never get to work at a scare company now!\n\n...Right?', 50, 50, 500, 500);
        
        buttons.restart1.draw();
    }
    if(scene === 'Lose2'){
        player2.x = 300; player2.xvel = 0;
        player2.y = 500; player2.yvel = 0;
        game2.light = {x: 0, y: 0, sz: 150};
        game2.y2 = 0;
        
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('T R A G E D Y', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('YOU LOST :(', 300, 100);
        
        textSize(15);
        fill(255);
        textSize(23);
        text('Oh no! You\'ve been eliminated from the Scare Games! Now you will be expelled from Monsters University. You\'ll never get to work at a scare company now!\n\n...Right?', 50, 50, 500, 500);
        
        buttons.restart2.draw();
    }
    if(scene === 'Lose3'){
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('T R A G E D Y', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('YOU LOST :(', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('YOU LOST :(', 300, 100);
        
        textSize(15);
        fill(255);
        textSize(23);
        text('Oh no! You\'ve been eliminated from the Scare Games! Now you will be expelled from Monsters University. You\'ll never get to work at a scare company now!\n\n...Right?', 50, 50, 500, 500);
        
        buttons.restart3.draw();
    }
    
    // Cursor
    cursor(overButton ? 'pointer' : 'default');
    
    // Transition
    rectMode(CENTER);
    if(trans.active){
        noFill();
        stroke(255);
        if(trans.out){
            strokeWeight(trans.sz);
        } else {
            strokeWeight(600 - trans.sz);
        }
        pushMatrix();
        translate(300, 300);
        rect(0, 0, width, height);
        popMatrix();
        trans.sz /= 1.5;
        if(trans.sz < 10 && !trans.out){
            trans.sz = 600;
            trans.out = true;
            scene = trans.nextScene;
        }
        if(trans.out && trans.sz < 0.1){
            trans.active = false;
            trans.sz = 600;
            trans.out = false;
        }
    }
    
    clicked = false;
    overButton = false;
};
