// color(40, 132, 212)

// Settings
textAlign(CENTER, CENTER);
textFont(createFont('Avenir'));

// Vital variables
var scene = 'Game1';
var clicked = false;
var overButton = false;
var trans = {sz: 600, active: false, nextScene: 'characters', out: false}; // or objects :P

// Processing functions
mouseClicked = function(){
    clicked = true;
};

// Helpful Graphics Functions
var mu = function(x, y){
    pushMatrix();
    translate(x, y);
    beginShape();
    vertex(-38, -24);
    vertex(-25, -24);
    vertex(-25, -50);
    vertex(-90, -50);
    vertex(-112, -16);
    vertex(-134, -50);
    vertex(-199, -50);
    vertex(-199, -25);
    vertex(-186, -25);
    vertex(-201, 48);
    vertex(-213, 48);
    vertex(-213, 73);
    vertex(-156, 73);
    vertex(-149, 32);
    vertex(-124, 72);
    vertex(-100, 72);
    vertex(-75, 33);
    vertex(-68, 73);
    vertex(-10, 73);
    vertex(-10, 48);
    vertex(-23, 48);
    endShape(CLOSE);
    beginShape();
    vertex(178, -25);
    vertex(178, 51);
    vertex(157, 73);
    vertex(40, 73);
    vertex(18, 52);
    vertex(18, -24);
    vertex(3, -24);
    vertex(3, -49);
    vertex(76, -49);
    vertex(76, -24);
    vertex(62, -24);
    vertex(62, 42);
    vertex(69, 49);
    vertex(128, 49);
    vertex(134, 42);
    vertex(134, -25);
    vertex(120, -25);
    vertex(120, -49);
    vertex(192, -49);
    vertex(192, -25);
    endShape(CLOSE);
    noStroke();
    fill(255);
    bezier(-160, 10, -130, -15, -95, -15, -65, 10);
    bezier(-160, 10, -130, 35, -95, 35, -65, 10);
    fill(0);
    ellipse(-113, 10, 30, 30);
    popMatrix();
};
var Mike = function(x, y, sz, hat, front){
    pushStyle();
    pushMatrix();
    translate(x, y);
    scale(sz / 50);
    // shadow
    noStroke();
    fill(0, 0, 0, 15);
    ellipse(0, 198, 150, 30);
    noFill();
    strokeWeight(15);
    stroke(118, 232, 114);
    // arms
    bezier(-90, 0, -116, -1, -100, 70, -91, 125);
    if(front){
        bezier(90, 0, 116, -1, 134, 37, 155 + sin(frameCount*10)*15, -85);
    } else {
        bezier(90, 0, 116, -1, 100, 70, 91, 125);
    }
    // legs
    line(40, 90, 55, 125);
    line(-40, 90, -55, 125);
    line(40, 175, 55, 125);
    line(-40, 175, -55, 125);
    // toes
    line(-40, 175, -65, 180);
    line(-40, 175, -55, 191);
    line(-40, 175, -36, 190);
    line(40, 175, 65, 180);
    line(40, 175, 55, 191);
    line(40, 175, 36, 190);
    // horns?
    noFill();
    strokeWeight(10);
    stroke(235, 223, 158);
    arc(0, -95, 120, 100, 0, 180);
    arc(0, -95, 120, 50, 0, 180);
    arc(0, -95, 120, 30, 0, 180);
    noStroke();
    fill(118, 232, 114);
    beginShape();
    curveVertex(-80,-40); curveVertex(0,-100); curveVertex(80,-40); curveVertex(85,50); curveVertex(0,100); curveVertex(-85,50); curveVertex(-80,-40); curveVertex(0,-100); curveVertex(80,-40); 
    endShape();
    endShape();
    if(front){
        fill(235);
        beginShape();
        curveVertex(-40,-40); curveVertex(0,-70); curveVertex(40,-40); curveVertex(40,0); curveVertex(0,20); curveVertex(-40,0); curveVertex(-40,-40); curveVertex(0,-70); curveVertex(40,-40);
        endShape();
        fill(45);
        ellipse(0, -15, 50, 50);
        noFill();
        strokeWeight(22);
        stroke(235, 235, 235, 50);
        arc(0, -15, 50, 50, -90, 0);
        strokeWeight(5);
        stroke(0, 0, 0, 50);
        arc(0, 0, 130, 100, 30, 150);
        arc(-62, 3, 20, 40, 50, 110);
        arc(62, 3, 20, 40, 80, 140);
        strokeWeight(2);
        stroke(0, 0, 0, 30);
        arc(0, 15, 90, 95, 60, 120);
    }
    // hat
    if(hat){
        noStroke();
        fill(61, 95, 158);
        arc(0, -85, 90, 90, -180, 0);
        textFont(createFont('Courier Bold'), 25);
        textAlign(CENTER, CENTER);
        fill(255);
        for(var i = 0; i < 360; i += 50){
            text('MU', sin(i)*3, -112 + cos(i)*3);
        }
        textSize(25);
        fill(0, 174, 255);
        text('MU', 0, -112);
        fill(22, 65, 145);
        arc(11, -85, 90, 37, -180, 0);
        arc(3, -85, 100, 11, -180, 0);
    }
    popMatrix();
    popStyle();
};

// Buttons
var button = function(x, y, sz, txt, next){
    this.x = x; 
    this.y = y;
    this.sz = sz; 
    this.txt = txt;
    this.next = next;
    this.y2 = 10;
};
button.prototype.draw = function() {
    noStroke();
    fill(255, 255, 255, 10);
    for(var i = 0; i < 360; i += 30){
        ellipse(this.x + sin(i)*5, 10 - this.y2 + this.y + cos(i)*5, this.sz * 1.15, this.sz * 1.15);
    }
    
    textSize(this.sz / 1.5);
    if(dist(mouseX, mouseY, this.x, this.y) < this.sz/2){
        this.y2 /= 1.1;
        
        fill(50, 129, 194);
        ellipse(this.x, this.y, this.sz * 1.15, this.sz * 1.15);
        noFill();
        strokeWeight(5);
        stroke(255, 255, 255);
        ellipse(this.x, this.y, this.sz, this.sz);
        overButton = true;
        if(clicked){
            trans.active = true;
            trans.nextScene = this.next;
        }
    } else {
        if(this.y2 < 10){
            this.y2 += 1;
        }
        noStroke();
        fill(40, 132, 212);
        ellipse(this.x, this.y, this.sz * 1.15, this.sz * 1.15);
        noFill();
        strokeWeight(5);
        stroke(255, 255, 255);
        ellipse(this.x, this.y, this.sz, this.sz);
    }
    fill(255);
    if(this.txt === '.'){
        noStroke();
        fill(255);
        if(this.sz < 100){
            triangle(this.x + 20, this.y, this.x - 15, this.y - 20, this.x - 15, this.y + 20);
        } else {
            triangle(this.x + 30, this.y, this.x - 22, this.y - 30, this.x - 22, this.y + 30);
        }
    } else if (this.txt === '-'){
        strokeCap(SQUARE);
        stroke(255);
        strokeWeight(5);
        line(this.x - 15, this.y - 10, this.x + 15, this.y - 10);
        line(this.x - 15, this.y, this.x + 15, this.y);
        line(this.x - 15, this.y + 10, this.x + 15, this.y + 10);
    } else {
        text(this.txt.toUpperCase(), this.x, this.y);
    }
};
var buttons = {
    play: new button(300, 450, 130, '.', 'How1'),
    how: new button(140, 450, 90, '?', 'How'),
    about: new button(460, 450, 90, '-', 'About'),
    back: new button(80, 520, 90, '<', 'Menu'),
    start: new button(510, 515, 95, '.', 'Game1'),
};

// Game objects
var Urchin = function(x, y){
    this.x = x;
    this.y = y;
    this.w = 30;
    this.h = 30;
    
    this.i = random(255);
    
    this.points = [];
    for(var i = 0; i < 360; i += 30){
        this.points.push({x: random(-5, 5) + sin(i) * 10, y: random(-5, 5) + cos(i) * 10});
    }
};
Urchin.prototype.draw = function() {
    pushMatrix();
    translate(this.x + 15, this.y + 15);
    fill(255, 0, 0, sin(this.i + frameCount * 5)*30);
    noStroke();
    for(var i = 50; i > 0; i -= 5){
        ellipse(0, 0, i, i);
    }
    beginShape();
    strokeWeight(3);
    stroke(204, 51, 51, sin(this.i + frameCount * 5)*255);
    fill(255, 0, 0, sin(this.i + frameCount * 5)*255);
    for(var i in this.points){
        vertex(this.points[i].x, this.points[i].y);
    }
    endShape(CLOSE);
    popMatrix();
};
var Urchins = [];
for(var i = 0; i < 10; i ++){
    Urchins.push(new Urchin(random(width), random(500)));
}

var Player = function(){
    this.x = 300;
    this.y = 550;
    this.sz = 30;
};
Player.prototype.draw = function() {
    Mike(this.x, this.y, 7, false, false);
};
var player = new Player();

// Logo
var Logo = function(){
    this.s  = 500;
    this.s2 = 1;
    this.s3 = 300;
    this.trans = 255;
};
Logo.prototype.draw = function(){
    background(26, 26, 26);
    
    pushMatrix();
    translate(300, 280);
    scale(1 - this.s2, 1 - this.s2/1.5);
    rotate(this.s2 * 360);
    noFill();
    
    stroke(214, 214, 214);
    
    // D
    strokeWeight(12);
    line(-145, -60, -145, 27);
    strokeWeight(5);
    bezier(-179, -8, -220, -20, -95, -51, -94, -17);
    bezier(-179, -8, -220, -22, -95, -42, -97, -17);
    bezier(-179, -8, -220, -22, -95, -39, -95, -12);
    bezier(-186, -15, -110, 85, 9, -19, -101, -76);
    bezier(-186, -15, -110, 84, -2, -19, -101, -76);
    bezier(-186, -15, -110, 77, -11, -18, -101, -76);
    bezier(-203, -97, -187, -104, -138, -101, -101, -76);
    
    // I
    strokeWeight(12);
    line(-35, -34, -35, 11);
    strokeWeight(5);
    bezier(-18, -86, -93, -25, 39, -75, -16, -87);
    bezier(-18, -86, -93, -25, 34, -63, -16, -87);
    bezier(-27, -88, -53, -92, -53, -60, -47, -61);
    bezier(-32, -85, -53, -86, -53, -51, -47, -61);
    bezier(-18, -86, -39, -80, -45, -58, -46, -54);
    
    // S
    strokeWeight(6);
    bezier(29, -37, -70, -23, 22, -23, 17, -17);
    bezier(34, -34, -70, -23, 22, -23, 17, -17);
    bezier(30, -32, -78, -22, 22, -21, 17, -17);
    bezier(-4, 4, 5, 11, 51, 0, 17, -18);
    bezier(-4, 8, 5, 14, 51, 10, 17, -18);
    bezier(-4, 8, 5, 14, 51, 10, 17, -18);
    bezier(-4, 4, 0, 13, -42, -16, 10, -6);
    bezier(-4, 7, 0, 13, -42, -16, 10, -6);
    bezier(-7, 3, 13, 13, -42, -16, 10, -3);
    
    // N
    strokeWeight(3);
    bezier(50, -35, 45, -21, 40, 8, 44, 14);
    bezier(53, -35, 47, -21, 52, 8, 48, 14);
    bezier(53, -35, 51, -21, 75, 8, 77, 9);
    bezier(53, -35, 67, -21, 93, 17, 77, 9);
    bezier(76, -47, 86, -30, 93, -5, 82, 9);
    bezier(73, -49, 80, -30, 84, -5, 76, -3);
    strokeWeight(6);
    bezier(50, -34, 47, -21, 46, 8, 46, 13);
    bezier(52, -21, 67, -21, 79, 17, 78, 4);
    bezier(53, -26, 48, -49, 85, 17, 74, 2);
    bezier(78, -40, 80, -30, 84, -5, 80, -3);
    bezier(77, -40, 86, -30, 88, -5, 83, 2);
    
    // E
    strokeWeight(3);
    bezier(97, -38, 108, -35, 137, -52, 141, -35);
    bezier(99, -33, 108, -31, 137, -26, 141, -35);
    bezier(99, -33, 95, -34, 97, -34, 97, -38);
    bezier(132, 3, 123, 19, 97, 22, 97, 9);
    bezier(130, 1, 123, 2, 97, 6, 97, 10);
    bezier(105, -29, 94, 2, 94, 6, 97, 9);
    strokeWeight(7);
    bezier(97, -35, 124, -35, 137, -44, 135, -35);
    bezier(103, -35, 108, -37, 135, -31, 136, -35);
    bezier(127, 4, 123, 2, 97, 15, 103, 11);
    bezier(127, 4, 123, 14, 97, 15, 103, 11);
    strokeWeight(10);
    line(101, -13, 129, -15);
    bezier(111, -29, 98, 2, 100, 6, 107, 9);
    
    // Y
    strokeWeight(3);
    bezier(161, -38, 109, 27, 204, 31, 196, -28);
    bezier(161, -38, 125, 19, 204, 17, 193, -28);
    bezier(192, -28, 170, -25, 153, 17, 146, 63);
    bezier(188, -37, 158, -25, 141, 17, 136, 55);
    strokeWeight(5);
    bezier(145, 63, 149, 75, 131, 53, 136, 57);
    strokeWeight(6);
    bezier(151, -20, 133, 20, 199, 27, 196, -28);
    bezier(151, -20, 133, 13, 199, 27, 196, -28);
    strokeWeight(7);
    bezier(191, -33, 161, -25, 147, 17, 140, 55);
    bezier(194, -33, 166, -25, 147, 17, 143, 60);
    
    // Slash
    strokeWeight(3);
    bezier(-121, 84, -75, 48, -19, 17, 191, 37);
    bezier(-111, 101, -88, 68, -19, 29, 191, 37);
    strokeWeight(10);
    bezier(-114, 93, -88, 68, -19, 29, 139, 35);
    bezier(-114, 85, -88, 68, -50, 29, 139, 35);
    strokeWeight(22);
    point(-115, 92);
    
    // Game medley
    textSize(44);
    fill(214);
    text('game medley', 57, 75);
    
    popMatrix();
    textSize(15);
    text('M A D E   A S   P A R T   O F   C H E S T E R   B A N K S \'', 300 - this.s, 113);
    
    pushMatrix();
    translate(300, 400);
    translate(0, this.s3);
    stroke(235);
    strokeWeight(10);
    noFill();
    arc(-230, 90, 200, 200, -245, 30);
    arc(100, 145, 200, 200, -200, 30);
    arc(-130, 388, 500, 500, -91, -57);
    arc(-130, 388, 500, 500, -131, -125);
    popMatrix();
    
    rectMode(CORNER);
    noStroke();
    fill(25, 25, 25, 255 - this.trans);
    rect(0, 0, width, height);
    
    this.s /= 1.1;
    if(this.s < 10){
        this.s2 /= 1.1;
    }
    if(this.s2 < 0.1){
        this.s3 /= 1.1;
    }
    if(this.s3 < 0.1){
        this.trans /= 1.3;
    }
    if(this.trans < 0.1){
        scene = 'Menu';
    }
};
var logo = new Logo();

// Menu
var Menu = function(){
    this.y1 = 300;
    this.y2 = 400;
};
Menu.prototype.draw = function() {
    background(26);
    noFill();
    strokeWeight(15);
    stroke(40, 132, 212);
    mu(15 + width / 2, (height / 3) - this.y1);
    strokeWeight(5);
    stroke(255);
    fill(40, 132, 212);
    mu(15 + width / 2, (height / 3) - this.y1);
    
    rectMode(CENTER);
    noStroke();
    fill(40, 132, 212);
    rect(300, 320 - this.y2, 420, 70);
    noFill();
    stroke(255);
    rect(300, 320 - this.y2, 400, 50);
    fill(255);
    textSize(27);
    text('T H E   S C A R E   G A M E S', 300, 320 - this.y2);
    
    pushMatrix();
    translate(0, this.y2);
    buttons.play.draw();
    buttons.how.draw();
    buttons.about.draw();
    popMatrix();
    
    this.y1 /= 1.1;
    if(this.y1 < 50){
        this.y2 /= 1.1;
    }
};
var menu = new Menu();

// Game #1 (Toxicity Challenge)
var Game1 = function(){
    
};
Game1.prototype.draw = function() {
    background(0);
    for(var i = 0; i < Urchins.length; ++i){
        Urchins[i].draw();
    }
    player.draw();
};
var game1 = new Game1();

draw = function() {
    // Draw those scenes
    if(scene === 'Logo'){
        logo.draw();
    }
    if(scene === 'Menu'){
        menu.draw();
    }
    if(scene === 'How'){
        background(25);
        
        textSize(100);
        fill(40, 132, 212);
        for(var i = 0; i < 360; i += 30){
            text('HOW', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('HOW', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('HOW', 300, 100);
        
        textSize(25);
        fill(255);
        text('This is a completely useless instructions page, because the instructions are explained in the game!', 50, 50, 500, 500);
        
        buttons.back.draw();
    }
    if(scene === 'About'){
        background(25);
        
        textSize(100);
        fill(40, 132, 212);
        for(var i = 0; i < 360; i += 30){
            text('ABOUT', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('ABOUT', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('ABOUT', 300, 100);
        
        textSize(20);
        fill(255);
        text('You\'ve wanted to be a scarer your whole life, and go to Monsters University to become one. But you get in a rivalry with the hotshot Jimmy Sullivan, and it ruins the end of year exam. You fail the scaring class!\n\nNow the only way for you to fulfill your dream of being a scarer is to win the Scare Games, a competition against other college teams. If you win, you get let back in the scaring class. But if you lose, you get expelled from Monsters University!', 50, 60, 500, 500);
        
        buttons.back.draw();
    }
    if(scene === 'How1'){
        background(25);
        
        fill(40, 132, 212);
        textSize(30);
        text('R O U N D   O N E', 300, 55);
        textSize(45);
        for(var i = 0; i < 360; i += 30){
            text('TOXICITY CHALLENGE', 300 + sin(i)*8, 100 + cos(i)*8);
        }
        fill(255);
        for(var i = 0; i < 360; i += 30){
            text('TOXICITY CHALLENGE', 300 + sin(i)*3, 100 + cos(i)*3);
        }
        fill(40, 132, 212);
        text('TOXICITY CHALLENGE', 300, 100);
        
        textSize(15);
        fill(255);
        pushStyle();
        textFont(createFont('Avenir Italic'));
        text('"A child\'s room is where you scare, but avoid the toxicity lurking there."', 300, 150);
        popStyle();
        textSize(25);
        text('In the first event of The Scare Games, you have to dash through a sewer tunnel in the dark in less than 60 seconds.\n\nRed and toxic, the stinging glow urchins will significantly slow you down. Avoid them at all costs!', 50, 50, 500, 500);
        
        textSize(15);
        text('YOU PLAY AS:', 360, 474);
        textSize(50);
        text('MIKE', 360, 500);
        Mike(240, 480, 20);
        
        buttons.start.draw();
    }
    if(scene === 'Game1'){
        game1.draw();
    }
    
    // Cursor
    cursor(overButton ? 'pointer' : 'default');
    
    // Transition
    rectMode(CENTER);
    if(trans.active){
        noFill();
        stroke(255);
        if(trans.out){
            strokeWeight(trans.sz);
        } else {
            strokeWeight(600 - trans.sz);
        }
        pushMatrix();
        translate(300, 300);
        rect(0, 0, width, height);
        popMatrix();
        trans.sz /= 1.5;
        if(trans.sz < 10 && !trans.out){
            trans.sz = 600;
            trans.out = true;
            scene = trans.nextScene;
        }
        if(trans.out && trans.sz < 0.1){
            trans.active = false;
            trans.sz = 600;
            trans.out = false;
        }
    }
    
    clicked = false;
    overButton = false;
};
